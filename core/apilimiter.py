# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import asyncio
import logging
import random
import time
from collections import deque
from telethon.tl.tlobject import TLRequest
from config import BotConfig

logger = logging.getLogger("UserBot.APILimiter")

class APILimiter:
    def __init__(self, bot):
        self.bot = bot
        
        # –î–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤
        self._period_requests = deque()
        self._period_lock = asyncio.Lock()
        self._period_cooldown = None
        
        # –î–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
        self._speed_requests = deque()
        self._speed_lock = asyncio.Lock()
        self._speed_cooldown = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        api_limiter_config = BotConfig.API_LIMITER
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤
        self.requests_per_period = api_limiter_config["requests_per_period"]
        self.period_duration = api_limiter_config["period_duration"]
        self.cooldown_after_period = api_limiter_config["cooldown_after_period"]
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.max_requests_per_second = api_limiter_config["max_requests_per_second"]
        self.high_load_cooldown = api_limiter_config["high_load_cooldown"]
        
        self.monitored_groups = api_limiter_config["monitored_groups"]
        self.forbidden_methods = api_limiter_config["forbidden_methods"]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É
        self._install_protection()
        logger.info("API Limiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")

    def _should_monitor(self, request):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å"""
        module_name = request.__class__.__module__.split('.')[-1]
        return module_name in self.monitored_groups

    def _is_forbidden(self, request):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—Ä–µ—â–µ–Ω –ª–∏ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å"""
        request_name = type(request).__name__
        return request_name in self.forbidden_methods

    async def _check_period_limit(self, request_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        async with self._period_lock:
            current_time = time.perf_counter()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            while self._period_requests and current_time - self._period_requests[0] > self.period_duration:
                self._period_requests.popleft()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            self._period_requests.append(current_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
            if len(self._period_requests) > self.requests_per_period:
                if not self._period_cooldown:
                    self._period_cooldown = asyncio.Event()
                    error_msg = (f"PeriodLimitExceeded - wait {self.cooldown_after_period} seconds\n"
                               f"–ó–∞–ø—Ä–æ—Å–æ–≤: {len(self._period_requests)}/{self.requests_per_period} "
                               f"–∑–∞ {self.period_duration} —Å–µ–∫")
                    logger.warning(error_msg)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±—Ä–æ—Å –∫—É–ª–¥–∞—É–Ω–∞
                    asyncio.create_task(self._reset_period_cooldown())
                
                return False
            return True

    async def _check_speed_limit(self, request_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ (–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É)"""
        async with self._speed_lock:
            current_time = time.perf_counter()
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
            while self._speed_requests and current_time - self._speed_requests[0] > 1:
                self._speed_requests.popleft()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            self._speed_requests.append(current_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
            if len(self._speed_requests) > self.max_requests_per_second:
                if not self._speed_cooldown:
                    self._speed_cooldown = asyncio.Event()
                    error_msg = (f"SpeedLimitExceeded - wait {self.high_load_cooldown} seconds\n"
                               f"–°–∫–æ—Ä–æ—Å—Ç—å: {len(self._speed_requests)} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫, "
                               f"–º–∞–∫—Å–∏–º—É–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ {self.max_requests_per_second}")
                    logger.warning(error_msg)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±—Ä–æ—Å –∫—É–ª–¥–∞—É–Ω–∞
                    asyncio.create_task(self._reset_speed_cooldown())
                
                return False
            
            return True

    async def _reset_period_cooldown(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É"""
        await asyncio.sleep(self.cooldown_after_period)
        async with self._period_lock:
            self._period_requests.clear()
            if self._period_cooldown:
                self._period_cooldown.set()
                self._period_cooldown = None
        logger.info("Period limit cooldown finished")

    async def _reset_speed_cooldown(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        await asyncio.sleep(self.high_load_cooldown)
        async with self._speed_lock:
            self._speed_requests.clear()
            if self._speed_cooldown:
                self._speed_cooldown.set()
                self._speed_cooldown = None
        logger.info("Speed limit cooldown finished")

    def _install_protection(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∞ API –≤—ã–∑–æ–≤–æ–≤"""
        if hasattr(self.bot.client._call, "_api_limiter_installed"):
            logger.warning("API –∑–∞—â–∏—Ç–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return

        old_call = self.bot.client._call

        async def new_call(
            sender,
            request: TLRequest,
            ordered: bool = False,
            flood_sleep_threshold: int = None,
        ):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–µ—â–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
            if self._is_forbidden(request):
                logger.warning(f"–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {type(request).__name__}")
                raise Exception("This API method is forbidden by security policy")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å
            if not self._should_monitor(request):
                return await old_call(sender, request, ordered, flood_sleep_threshold)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (5-15 –º—Å)
            delay = random.randint(5, 15) / 1000
            await asyncio.sleep(delay)

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–µ—Ç–æ–¥–∞
            request_name = type(request).__name__
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
            speed_allowed = await self._check_speed_limit(request_name)
            if not speed_allowed and self._speed_cooldown:
                await self._speed_cooldown.wait()
                # –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                speed_allowed = await self._check_speed_limit(request_name)
                if not speed_allowed:
                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ, –∂–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞
                    await self._speed_cooldown.wait()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
            period_allowed = await self._check_period_limit(request_name)
            if not period_allowed and self._period_cooldown:
                await self._period_cooldown.wait()
                # –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                period_allowed = await self._check_period_limit(request_name)
                if not period_allowed:
                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ, –∂–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞
                    await self._period_cooldown.wait()
            
            return await old_call(sender, request, ordered, flood_sleep_threshold)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
        self.bot.client._call = new_call
        self.bot.client._call._api_limiter_installed = True
        logger.info("‚úÖ API protection installed with new limiting logic")
