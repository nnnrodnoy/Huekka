# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import asyncio
import logging
import random
import time
from collections import deque
from telethon.tl.tlobject import TLRequest
from config import BotConfig

logger = logging.getLogger("UserBot.APILimiter")

class APILimiter:
    def __init__(self, bot):
        self.bot = bot
        
        # –î–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ (Rate Limiting)
        self._rate_requests = deque()
        self._rate_lock = asyncio.Lock()
        self._rate_cooldown = None
        
        # –î–ª—è –æ–±—â–µ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (Burst Limiting)
        self._burst_requests = deque()
        self._burst_lock = asyncio.Lock()
        self._burst_cooldown = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        api_limiter_config = BotConfig.API_LIMITER
        self.rate_time_sample = api_limiter_config["rate_time_sample"]
        self.rate_threshold = api_limiter_config["rate_threshold"]
        self.rate_cooldown_duration = api_limiter_config["rate_cooldown_duration"]
        
        self.burst_max_requests = api_limiter_config["burst_max_requests"]
        self.burst_cooldown_duration = api_limiter_config["burst_cooldown_duration"]
        
        self.monitored_groups = api_limiter_config["monitored_groups"]
        self.forbidden_methods = api_limiter_config["forbidden_methods"]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É
        self._install_protection()
        logger.info("API Limiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –¥–≤—É–º—è —Ç–∏–ø–∞–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")

    def _should_monitor(self, request):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å"""
        module_name = request.__class__.__module__.split('.')[-1]
        return module_name in self.monitored_groups

    def _is_forbidden(self, request):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—Ä–µ—â–µ–Ω –ª–∏ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å"""
        request_name = type(request).__name__
        return request_name in self.forbidden_methods

    async def _check_rate_limit(self, request_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        async with self._rate_lock:
            current_time = time.perf_counter()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            while self._rate_requests and current_time - self._rate_requests[0] > self.rate_time_sample:
                self._rate_requests.popleft()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            self._rate_requests.append(current_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
            if len(self._rate_requests) > self.rate_threshold:
                if not self._rate_cooldown:
                    self._rate_cooldown = asyncio.Event()
                    error_msg = (f"RateLimitExceeded - wait {self.rate_cooldown_duration} seconds\n"
                               f"–ó–∞–ø—Ä–æ—Å–æ–≤: {len(self._rate_requests)}/{self.rate_threshold} "
                               f"–∑–∞ {self.rate_time_sample} —Å–µ–∫")
                    logger.warning(error_msg)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±—Ä–æ—Å –∫—É–ª–¥–∞—É–Ω–∞
                    asyncio.create_task(self._reset_rate_cooldown())
                
                return False
            return True

    async def _check_burst_limit(self, request_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—â–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ (Burst)"""
        async with self._burst_lock:
            current_time = time.perf_counter()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            self._burst_requests.append(current_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
            if len(self._burst_requests) > self.burst_max_requests:
                if not self._burst_cooldown:
                    self._burst_cooldown = asyncio.Event()
                    error_msg = (f"BurstLimitExceeded - wait {self.burst_cooldown_duration} seconds\n"
                               f"–°–¥–µ–ª–∞–Ω–æ {len(self._burst_requests)} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥, "
                               f"–º–∞–∫—Å–∏–º—É–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ {self.burst_max_requests}")
                    logger.warning(error_msg)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±—Ä–æ—Å –∫—É–ª–¥–∞—É–Ω–∞
                    asyncio.create_task(self._reset_burst_cooldown())
                
                return False
            
            return True

    async def _reset_rate_cooldown(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        await asyncio.sleep(self.rate_cooldown_duration)
        async with self._rate_lock:
            self._rate_requests.clear()
            if self._rate_cooldown:
                self._rate_cooldown.set()
                self._rate_cooldown = None
        logger.info("Rate limit cooldown finished")

    async def _reset_burst_cooldown(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –æ–±—â–µ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
        await asyncio.sleep(self.burst_cooldown_duration)
        async with self._burst_lock:
            self._burst_requests.clear()
            if self._burst_cooldown:
                self._burst_cooldown.set()
                self._burst_cooldown = None
        logger.info("Burst limit cooldown finished")

    def _install_protection(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∞ API –≤—ã–∑–æ–≤–æ–≤"""
        if hasattr(self.bot.client._call, "_api_limiter_installed"):
            logger.warning("API –∑–∞—â–∏—Ç–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return

        old_call = self.bot.client._call

        async def new_call(
            sender,
            request: TLRequest,
            ordered: bool = False,
            flood_sleep_threshold: int = None,
        ):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–µ—â–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
            if self._is_forbidden(request):
                logger.warning(f"–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {type(request).__name__}")
                raise Exception("This API method is forbidden by security policy")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å
            if not self._should_monitor(request):
                return await old_call(sender, request, ordered, flood_sleep_threshold)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (5-15 –º—Å)
            delay = random.randint(5, 15) / 1000
            await asyncio.sleep(delay)

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–µ—Ç–æ–¥–∞
            request_name = type(request).__name__
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ (Burst)
            burst_allowed = await self._check_burst_limit(request_name)
            if not burst_allowed and self._burst_cooldown:
                await self._burst_cooldown.wait()
                # –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                burst_allowed = await self._check_burst_limit(request_name)
                if not burst_allowed:
                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ, –∂–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞
                    await self._burst_cooldown.wait()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (Rate)
            rate_allowed = await self._check_rate_limit(request_name)
            if not rate_allowed and self._rate_cooldown:
                await self._rate_cooldown.wait()
                # –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                rate_allowed = await self._check_rate_limit(request_name)
                if not rate_allowed:
                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ, –∂–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞
                    await self._rate_cooldown.wait()
            
            return await old_call(sender, request, ordered, flood_sleep_threshold)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
        self.bot.client._call = new_call
        self.bot.client._call._api_limiter_installed = True
        logger.info("‚úÖ API protection installed with dual limiting")
