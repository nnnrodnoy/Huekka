# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import logging
import time
from datetime import datetime
from typing import List, Dict, Any, Union

logger = logging.getLogger("UserBot.Formatters")

class TextFormatters:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã"""
    
    @staticmethod
    def progress_bar(percentage: int, length: int = 10, filled_char: str = "‚ñà", empty_char: str = "‚ñë") -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        filled = int(length * percentage / 100)
        empty = length - filled
        return f"[{filled_char * filled}{empty_char * empty}] {percentage}%"
    
    @staticmethod
    def format_table(headers: List[str], rows: List[List[str]], align: str = "left") -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É"""
        if not rows:
            return "No data available"
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        col_widths = [len(str(header)) for header in headers]
        for row in rows:
            for i, cell in enumerate(row):
                col_widths[i] = max(col_widths[i], len(str(cell)))
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        separator = "+" + "+".join(["-" * (w + 2) for w in col_widths]) + "+"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_line = "|" + "|".join([
            f" {h:{'<' if align == 'left' else '>' if align == 'right' else '^'}{w}} " 
            for h, w in zip(headers, col_widths)
        ]) + "|"
        
        # –î–∞–Ω–Ω—ã–µ
        data_lines = []
        for row in rows:
            data_line = "|" + "|".join([
                f" {str(cell):{'<' if align == 'left' else '>' if align == 'right' else '^'}{w}} " 
                for cell, w in zip(row, col_widths)
            ]) + "|"
            data_lines.append(data_line)
        
        return "\n".join([separator, header_line, separator] + data_lines + [separator])
    
    @staticmethod
    def format_time(seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        days, remainder = divmod(seconds, 86400)
        hours, remainder = divmod(remainder, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        parts = []
        if days: parts.append(f"{int(days)}–¥")
        if hours: parts.append(f"{int(hours)}—á")
        if minutes: parts.append(f"{int(minutes)}–º–∏–Ω")
        if seconds or not parts: parts.append(f"{int(seconds)}—Å–µ–∫")
        
        return " ".join(parts)
    
    @staticmethod
    def format_size(size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} PB"
    
    @staticmethod
    def format_list(items: List[str], style: str = "bullet", start: int = 1) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        if style == "bullet":
            return "\n".join([f"‚Ä¢ {item}" for item in items])
        elif style == "numbered":
            return "\n".join([f"{i}. {item}" for i, item in enumerate(items, start)])
        elif style == "dash":
            return "\n".join([f"- {item}" for item in items])
        return "\n".join(items)

class MessageFormatters:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π"""
    
    @staticmethod
    def error(message: str, details: str = "") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        if details:
            return f"<emoji document_id=5240241223632954241>üö´</emoji> <b>–û—à–∏–±–∫–∞:</b> {message}\n<code>{details}</code>"
        return f"<emoji document_id=5240241223632954241>üö´</emoji> <b>–û—à–∏–±–∫–∞:</b> {message}"
    
    @staticmethod
    def warning(message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        return f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> {message}"
    
    @staticmethod
    def success(message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return f"<emoji document_id=5206607081334906820>‚úÖ</emoji> <b>–£—Å–ø–µ—Ö:</b> {message}"
    
    @staticmethod
    def info(message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return f"<emoji document_id=5422439311196834318>‚ÑπÔ∏è</emoji> <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {message}"
    
    @staticmethod
    def question(message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞"""
        return f"<emoji document_id=5436113877181941026>‚ùì</emoji> <b>–í–æ–ø—Ä–æ—Å:</b> {message}"
    
    @staticmethod
    def tip(message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
        return f"<emoji document_id=5422439311196834318>üí°</emoji> <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> {message}"

class ModuleInfoFormatters:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–µ—Ä—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª—è—Ö"""
    
    @staticmethod
    def format_module_info(module_info, is_premium, total_emoji_id, random_smile,
                          command_emoji_id, developer_emoji_id, prefix):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)"""
        text = ""
        if is_premium:
            text += f"<emoji document_id={total_emoji_id}>üïí</emoji> "
        text += f"<b>{module_info['name']} (v{module_info['version']})</b>\n"
        text += f"<i>{module_info['description']}</i>\n"
        text += f"<b><i>{random_smile}</i></b>\n\n" 
                              
        for cmd in module_info['commands']:
            if is_premium:
                text += f"<emoji document_id={command_emoji_id}>‚ñ´Ô∏è</emoji> "
            else:
                text += "‚ñ´Ô∏è "
            
            text += f"<code>{prefix}{cmd['command']}</code> - <i>{cmd['description']}</i>\n"
        
        if is_premium:
            text += f"\n<emoji document_id={developer_emoji_id}>ü´∂</emoji> "
        else:
            text += "\nü´∂ "
        text += f"<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> {module_info['developer']}"
        
        return text

    @staticmethod
    def format_loaded_message(module_info, is_premium, loaded_emoji_id, random_smile,
                             command_emoji_id, dev_emoji_id, prefix):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –º–æ–¥—É–ª–µ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)"""
        text = ""
        if is_premium:
            text += f"<emoji document_id={loaded_emoji_id}>üåò</emoji> "
        text += f"<b>{module_info['name']} –∑–∞–≥—Ä—É–∂–µ–Ω (v{module_info['version']})</b>\n"
        
        if module_info['description']:
            text += f"<i>{module_info['description']}</i>\n"
            
        text += f"<b><i>{random_smile}</i></b>\n\n"
        
        for cmd in module_info['commands']:
            if is_premium:
                text += f"<emoji document_id={command_emoji_id}>‚ñ´Ô∏è</emoji> "
            else:
                text += "‚ñ´Ô∏è "
                
            text += f"<code>{prefix}{cmd['command']}</code> - <i>{cmd['description']}</i>\n"
        
        text += "\n"
        if is_premium:
            text += f"<emoji document_id={dev_emoji_id}>ü´∂</emoji> "
        else:
            text += "ü´∂ "
        text += f"<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> {module_info['developer']}"
        
        return text

    @staticmethod
    def format_unloaded_message(module_name, is_premium, info_emoji_id, prefix):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)"""
        text = ""
        if is_premium:
            text += f"<emoji document_id={info_emoji_id}>‚ñ™Ô∏è</emoji>"
        else:
            text += "‚ñ™Ô∏è"
        
        text += f"<b>–ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.</b>\n"
        text += f"<i>(–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>{prefix}help</code> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–¥—É–ª–µ–π –∏ –∫–æ–º–∞–Ω–¥.)</i>"
        
        return text

class HelpFormatters:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è help –º–æ–¥—É–ª—è"""
    
    @staticmethod
    def format_module_info(module_info, is_premium, total_emoji_id, random_smile, 
                          command_emoji_id, developer_emoji_id, prefix):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ (–∫–∞–∫ –≤ help.py)"""
        return ModuleInfoFormatters.format_module_info(
            module_info, is_premium, total_emoji_id, random_smile,
            command_emoji_id, developer_emoji_id, prefix
        )

    @staticmethod
    def format_main_help(total_modules, is_premium, total_emoji_id, section_emoji_id,
                        command_emoji_id, modules_list, prefix):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ (–∫–∞–∫ –≤ help.py)"""
        reply = ""
        
        if is_premium:
            reply += f"<emoji document_id={total_emoji_id}>üïí</emoji> "
        reply += f"<b>–î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥—É–ª–µ–π:</b> {total_modules}\n"
        reply += f"<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>{prefix}help &lt;–∫–æ–º–∞–Ω–¥–∞&gt;</code> –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ</i>\n"
        reply += f"<i>–ò–ª–∏ <code>{prefix}help &lt;–º–æ–¥—É–ª—å&gt;</code> –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ</i>\n\n"
        
        if is_premium:
            reply += f"<emoji document_id={section_emoji_id}>üëÅÔ∏è</emoji> "
        reply += "<b>–ú–æ–¥—É–ª–∏:</b>\n"
        reply += "\n".join(modules_list)
        
        return reply

class LoaderFormatters:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è loader –º–æ–¥—É–ª—è"""
    
    @staticmethod
    def format_loaded_message(module_info, is_premium, loaded_emoji_id, random_smile,
                             command_emoji_id, dev_emoji_id, prefix):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –º–æ–¥—É–ª–µ (–∫–∞–∫ –≤ loader.py)"""
        return ModuleInfoFormatters.format_loaded_message(
            module_info, is_premium, loaded_emoji_id, random_smile,
            command_emoji_id, dev_emoji_id, prefix
        )

    @staticmethod
    def format_unloaded_message(module_name, is_premium, info_emoji_id, prefix):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è (–∫–∞–∫ –≤ loader.py)"""
        return ModuleInfoFormatters.format_unloaded_message(
            module_name, is_premium, info_emoji_id, prefix
        )

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
text = TextFormatters()
msg = MessageFormatters()
help_format = HelpFormatters()
loader_format = LoaderFormatters()
module_info_format = ModuleInfoFormatters()
