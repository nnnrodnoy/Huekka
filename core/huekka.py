# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import os
import logging
import time
from pathlib import Path
from telethon import events
from telethon.tl.types import MessageEntityCustomEmoji
from telethon.errors import MessageNotModifiedError
from config import BotConfig
from core.formatters import text, msg

logger = logging.getLogger("UserBot.Huekka")

def get_module_info():
    return {
        "name": "Huekka",
        "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ Huekka –∏ —Ä–∞–±–æ—Ç–∞ —Å —ç–º–æ–¥–∑–∏",
        "developer": "@BotHuekka",
        "version": "1.0.0",
        "commands": [
            {
                "command": "huekka",
                "description": "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"
            },
            {
                "command": "ping",
                "description": "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω–≥ –±–æ—Ç–∞"
            },
            {
                "command": "setamoji",
                "description": "–ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏"
            },
            {
                "command": "online",
                "description": "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"
            }
        ]
    }

MODULE_INFO = get_module_info()

class HuekkaModule:
    def __init__(self, bot):
        self.bot = bot
        
        base_dir = Path(__file__).resolve().parent.parent
        
        self.image_path = base_dir / "asset" / "image" / "huekka.jpg"
        self.clock_emoji_id = BotConfig.EMOJI_IDS["clock"]
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ MODULE_INFO
        for cmd_info in MODULE_INFO["commands"]:
            if cmd_info["command"] == "huekka":
                bot.register_command(
                    cmd=cmd_info["command"],
                    handler=self.cmd_huekka,
                    description=cmd_info["description"],
                    module_name=MODULE_INFO["name"]
                )
            elif cmd_info["command"] == "ping":
                bot.register_command(
                    cmd=cmd_info["command"],
                    handler=self.cmd_ping,
                    description=cmd_info["description"],
                    module_name=MODULE_INFO["name"]
                )
            elif cmd_info["command"] == "setamoji":
                bot.register_command(
                    cmd=cmd_info["command"],
                    handler=self.cmd_setamoji,
                    description=cmd_info["description"],
                    module_name=MODULE_INFO["name"]
                )
            elif cmd_info["command"] == "online":
                bot.register_command(
                    cmd=cmd_info["command"],
                    handler=self.cmd_online,
                    description=cmd_info["description"],
                    module_name=MODULE_INFO["name"]
                )
        
        bot.set_module_description(MODULE_INFO["name"], MODULE_INFO["description"])
        
        logger.info(f"–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {self.image_path}")
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.image_path.exists()}")

    async def cmd_huekka(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .huekka"""
        try:
            if not self.image_path.exists():
                error_msg = f"<emoji document_id=5240241223632954241>üö´</emoji> <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏:</b> <code>{self.image_path}</code>\n"
                error_msg += f"<b>–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:</b> <code>{Path.cwd()}</code>\n"
                error_msg += f"<b>–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å:</b> <code>{self.image_path.resolve()}</code>\n"
                error_msg += f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.</b>"
                await event.edit(error_msg)
                return
            
            message_text = (
                f"<emoji document_id=5370932688993656500>üåë</emoji> <b>Huekka</b> - <i>Version</i> <i>{BotConfig.VERSION}</i>\n\n"
                f"<emoji document_id=5377520790868603876>‚ÑπÔ∏è</emoji> <b>GitHub</b>: <i><a href='{BotConfig.GITHUB_URL}'>Huekka</a></i>\n"
                f"<emoji document_id=5377520790868603876>‚ÑπÔ∏è</emoji> <b>Channel</b>: <i><a href='https://t.me/BotHuekka'>Huekka</a></i>"
            )
            
            await event.delete() 
            await self.bot.client.send_file(
                event.chat_id,
                self.image_path,
                caption=message_text,
                reply_to=event.reply_to_msg_id
            )
            
        except Exception as e:
            error_msg = f"<emoji document_id=5240241223632954241>üö´</emoji> <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b> {str(e)}"
            await event.edit(error_msg)
            logger.error(f"<b>–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ</b> '.huekka:' {str(e)}")

    async def cmd_ping(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .ping"""
        current_time = time.time()
        message_time = event.message.date.timestamp()
        ping_time = round((current_time - message_time) * 1000, 2)
        
        await event.edit(f"<emoji document_id=5370932688993656500>‚ñ´Ô∏è</emoji> <b>—Å–µ–π—á–∞—Å –ø–∏–Ω–≥</b> - <code>{ping_time}ms</code>")

    async def cmd_setamoji(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .setamoji - –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏"""
        reply = await event.get_reply_message()
        if not reply:
            await event.edit("<emoji document_id=5210952531676504517>‚ùå</emoji> <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏!</b>")
            return
            
        if not reply.entities:
            await event.edit("<emoji document_id=5210952531676504517>‚ùå</emoji> <b>–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏!</b>")
            return
            
        custom_emojis = []
        for entity in reply.entities:
            if isinstance(entity, MessageEntityCustomEmoji):
                emoji_char = reply.message[entity.offset:entity.offset + entity.length]
                custom_emojis.append((emoji_char, entity.document_id))
        
        if not custom_emojis:
            await event.edit("<emoji document_id=5210952531676504517>‚ùå</emoji> <b>–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏!</b>")
            return
            
        result = "<emoji document_id=5818774589714468177>‚ñ™Ô∏è</emoji> <b>Premium-Amoji:</b>\n\n"
        
        for i, (emoji_char, doc_id) in enumerate(custom_emojis, 1):
            result += f"<b>1.</b> <code>MARKDOWN</code> - <code>[{emoji_char}](emoji/{doc_id})</code>\n\n"
            result += f"<b>2.</b> <code>HTML</code> - <code>&lt;emoji document_id={doc_id}&gt;{emoji_char}&lt;/emoji&gt;</code>\n"
        
        await event.edit(result)

    async def is_premium_user(self, event):
        try:
            user = await event.get_sender()
            return user.premium if hasattr(user, 'premium') else False
        except Exception:
            return False

    async def add_to_autoclean(self, message):
        try:
            if hasattr(self.bot, 'autocleaner') and self.bot.autocleaner.enabled:
                await self.bot.autocleaner.schedule_cleanup(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É: {str(e)}")

    async def cmd_online(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .online"""
        try:
            is_premium = await self.is_premium_user(event)
            uptime = text.format_time(time.time() - self.bot.start_time)
            
            if is_premium:
                msg_text = f"<emoji document_id={self.clock_emoji_id}>üïí</emoji> <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> <code>{uptime}</code>"
            else:
                msg_text = f"üïí <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> <code>{uptime}</code>"
            
            msg_obj = await event.edit(msg_text)
            await self.add_to_autoclean(msg_obj)
        except MessageNotModifiedError:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ .online: {str(e)}")

def setup(bot):
    HuekkaModule(bot)
