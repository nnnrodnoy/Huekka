import os
import re
import asyncio
import random
import string
from pathlib import Path
from telethon import events
from telethon.errors import FloodWaitError
from config import BotConfig

class InlineSetup:
    def __init__(self, bot):
        self.bot = bot
        self.creation_in_progress = False
        self.expected_name = "Huekka-inline-bot"
        self.config_path = Path("session") / "inline_config.py"
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.config_path.exists():
            asyncio.create_task(self.auto_create_bot())

    async def auto_create_bot(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        if self.creation_in_progress:
            return
            
        self.creation_in_progress = True
        
        try:
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º, —á—Ç–æ–±—ã –±–æ—Ç —É—Å–ø–µ–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            await asyncio.sleep(10)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à—É —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–±–µ
            me = await self.bot.client.get_me()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
            await self.bot.client.send_message(me.id, "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—é –∏–Ω–ª–∞–π–Ω –±–æ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            success = await self.create_bot_process()
            
            if success:
                await self.bot.client.send_message(me.id, "‚úÖ –ò–Ω–ª–∞–π–Ω –±–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            else:
                await self.bot.client.send_message(me.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–ª–∞–π–Ω –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É .create_inline_bot –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.")
                
        except Exception as e:
            me = await self.bot.client.get_me()
            await self.bot.client.send_message(me.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–ª–∞–π–Ω –±–æ—Ç–∞: {str(e)}")
        finally:
            self.creation_in_progress = False

    async def create_bot_process(self):
        """–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º entity BotFather
            botfather = await self.bot.client.get_entity('BotFather')
            
            # –®–∞–≥ 1: /start
            await self.bot.client.send_message(botfather, '/start')
            await asyncio.sleep(2)
            
            # –®–∞–≥ 2: /newbot
            await self.bot.client.send_message(botfather, '/newbot')
            await asyncio.sleep(2)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç BotFather
            messages = await self.bot.client.get_messages(botfather, limit=10)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã BotFather
            for msg in messages:
                text = msg.text.lower()
                
                # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –±–æ—Ç–∞
                if "how are we going to call it" in text or "–≤—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞" in text:
                    await self.bot.client.send_message(botfather, self.expected_name)
                    await asyncio.sleep(2)
                    continue
                
                # –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º username
                if "choose a username for your bot" in text or "–ø—Ä–∏–¥—É–º–∞–π—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞" in text:
                    username = self.generate_username()
                    await self.bot.client.send_message(botfather, username)
                    await asyncio.sleep(2)
                    continue
                
                # –®–∞–≥ 5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç—ã–π username
                if "sorry" in text or "—ç—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ" in text:
                    username = self.generate_username()
                    await self.bot.client.send_message(botfather, username)
                    await asyncio.sleep(2)
                    continue
                
                # –®–∞–≥ 6: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
                if "done" in text or "–≥–æ—Ç–æ–≤–æ" in text:
                    token = self.extract_token(msg.text)
                    bot_username = self.extract_bot_username(msg.text)
                    
                    if token and bot_username:
                        await self.save_bot_config(token, bot_username)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º /start –Ω–æ–≤–æ–º—É –±–æ—Ç—É
                        await asyncio.sleep(2)
                        await self.bot.client.send_message(bot_username, '/start')
                        
                        # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                        await self.cleanup_messages(botfather)
                        return True
            
            return False
                
        except FloodWaitError as e:
            await asyncio.sleep(e.seconds)
            return await self.create_bot_process()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {str(e)}")
            return False

    def generate_username(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ username"""
        random_suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
        return f"huekka_inline_bot_{random_suffix}_bot"

    def extract_token(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        token_pattern = r'(\d+:[a-zA-Z0-9_-]+)'
        match = re.search(token_pattern, text)
        return match.group(1) if match else None

    def extract_bot_username(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ username –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        username_pattern = r't\.me/(\w+)'
        match = re.search(username_pattern, text)
        return match.group(1) if match else None

    async def save_bot_config(self, token, username):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        os.makedirs("session", exist_ok=True)
        with open(self.config_path, 'w') as f:
            f.write(f"BOT_TOKEN = '{token}'\n")
            f.write(f"BOT_USERNAME = '{username}'\n")
        
    async def cleanup_messages(self, botfather):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å BotFather
            messages = await self.bot.client.get_messages(botfather, limit=20)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±–æ—Ç–∞
            for message in messages:
                try:
                    if message.sender_id == (await self.bot.client.get_me()).id:
                        await message.delete()
                        await asyncio.sleep(0.5)
                except:
                    pass
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

def setup(bot):
    InlineSetup(bot)
