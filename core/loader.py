# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import os
import sys
import importlib
import asyncio
import logging
import difflib
from pathlib import Path
from telethon import events, types
from telethon.errors import MessageNotModifiedError
import traceback
import time
import random
import re
from config import BotConfig
from core.formatters import loader_format, msg

logger = logging.getLogger("UserBot.Loader")

def get_module_info():
    return {
        "name": "Loader",
        "description": "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π",
        "developer": "@BotHuekka",
        "version": "1.0.0",
        "commands": [
            {
                "command": "lm",
                "description": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ —Ñ–∞–π–ª–∞"
            },
            {
                "command": "ulm",
                "description": "–í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å"
            }
        ]
    }

MODULE_INFO = get_module_info()

class LoaderModule:
    def __init__(self, bot):
        self.bot = bot
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º emoji ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.loader_emoji_id = str(BotConfig.EMOJI_IDS["loader"])
        self.loaded_emoji_id = str(BotConfig.EMOJI_IDS["loaded"])
        self.command_emoji_id = str(BotConfig.EMOJI_IDS["command"])
        self.dev_emoji_id = str(BotConfig.EMOJI_IDS["dev"])
        self.info_emoji_id = str(BotConfig.EMOJI_IDS["info"])
        
        self.min_animation_time = BotConfig.LOADER["min_animation_time"]
        self.delete_delay = BotConfig.LOADER["delete_delay"]
        
        bot.register_command(
            cmd="lm",
            handler=self.load_module,
            description="–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ —Ñ–∞–π–ª–∞",
            module_name=MODULE_INFO["name"]
        )
        
        bot.register_command(
            cmd="ulm",
            handler=self.unload_module,
            description="–í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å",
            module_name=MODULE_INFO["name"]
        )
        
        bot.set_module_description(MODULE_INFO["name"], MODULE_INFO["description"])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = bot.db.set_module_info(
            MODULE_INFO["name"],
            MODULE_INFO["developer"],
            MODULE_INFO["version"],
            MODULE_INFO["description"],
            MODULE_INFO["commands"],
            True  # is_stock = True –¥–ª—è core-–º–æ–¥—É–ª–µ–π
        )
        
        if not success:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ Loader –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    def get_random_smile(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–º–∞–π–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            return self.bot.db.get_random_smile()
        except AttributeError:
            # –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥
            return random.choice(BotConfig.DEFAULT_SMILES)

    async def get_user_info(self, event):
        try:
            user = await event.get_sender()
            return {
                "premium": user.premium if hasattr(user, 'premium') else False,
                "username": user.username or f"id{user.id}"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {str(e)}")
            return {"premium": False, "username": "unknown"}

    def _camel_to_snake(self, name):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç CamelCase –≤ snake_case"""
        name = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', name).lower()

    def _module_name_to_filename(self, module_name):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–º—è –º–æ–¥—É–ª—è –≤ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
        variants = [
            module_name.lower() + '.py',
            self._camel_to_snake(module_name) + '.py',
            module_name + '.py'
        ]
        return variants

    async def find_module_info(self, module_name):
        normalized_query = module_name.lower().strip()
        
        if module_name in self.bot.modules:
            return module_name, await self.get_module_info(module_name)
        
        for name in self.bot.modules.keys():
            if name.lower() == normalized_query:
                return name, await self.get_module_info(name)
        
        closest = difflib.get_close_matches(
            normalized_query,
            [name.lower() for name in self.bot.modules.keys()],
            n=1,
            cutoff=0.6
        )
        
        if closest:
            for name in self.bot.modules.keys():
                if name.lower() == closest[0]:
                    return name, await self.get_module_info(name)
        
        return None, None

    def find_module_file(self, query):
        normalized_query = query.lower().strip().replace('.py', '')
        modules_dir = Path("modules").resolve()
        
        if not modules_dir.exists():
            logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥—É–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {modules_dir}")
            return None

        files = [f for f in modules_dir.iterdir() if f.is_file() and f.suffix == '.py']
        
        for file in files:
            if file.stem.lower() == normalized_query:
                return file

        closest = difflib.get_close_matches(
            normalized_query,
            [f.stem.lower() for f in files],
            n=1,
            cutoff=0.7
        )
        
        if closest:
            for file in files:
                if file.stem.lower() == closest[0]:
                    return file
        
        snake_case_name = self._camel_to_snake(normalized_query)
        for file in files:
            if file.stem.lower() == snake_case_name:
                return file
        
        return None

    async def get_module_info(self, module_name):
        if module_name not in self.bot.modules:
            return None
            
        try:
            module = sys.modules.get(module_name)
            if module and hasattr(module, 'get_module_info'):
                info = module.get_module_info()
                return info
        except Exception:
            pass
        
        commands = []
        for cmd, data in self.bot.modules[module_name].items():
            commands.append({
                "command": cmd,
                "description": data.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
            })
        
        return {
            "name": module_name,
            "description": self.bot.module_descriptions.get(module_name, ""),
            "commands": commands,
            "is_stock": module_name in self.bot.core_modules,
            "version": "1.0.0",
            "developer": "@BotHuekka"
        }

    async def animate_loading_until_done(self, event, message, is_premium, coroutine):
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω—ã"""
        animation = ["/", "-", "\\", "|"]
        i = 0
        
        anim_task = asyncio.create_task(self._run_animation(event, message, is_premium, animation))
        
        try:
            result = await coroutine
            return result
        finally:
            if not anim_task.done():
                anim_task.cancel()

    async def _run_animation(self, event, message, is_premium, animation):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é"""
        i = 0
        try:
            while True:
                frame = animation[i % len(animation)]
                prefix = f"[‚åõÔ∏è](emoji/{self.loader_emoji_id}) " if is_premium else "‚åõÔ∏è "
                await event.edit(f"{prefix}{message} {frame}")
                i += 1
                await asyncio.sleep(0.3)
        except MessageNotModifiedError:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")

    async def check_and_install_dependencies(self, module_file, event, is_premium):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è"""
        if not hasattr(self.bot, 'dependency_installer'):
            return True
            
        async def install_deps():
            installed, errors = await self.bot.dependency_installer.install_dependencies(module_file)
            
            if errors:
                error_list = "\n".join([f"‚Ä¢ {error}" for error in errors[:3]])
                raise Exception(f"–û—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:\n{error_list}")
            
            return True
            
        try:
            return await self.animate_loading_until_done(
                event, "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...", is_premium, install_deps()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {str(e)}")
            await event.edit(f"[‚ùå](emoji/5210952531676504517) {str(e)}")
            return False

    async def unload_existing_module(self, module_name):
        """–í—ã–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏"""
        if module_name not in self.bot.modules:
            logger.info(f"–ú–æ–¥—É–ª—å {module_name} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É")
            return True
            
        if module_name in self.bot.core_modules:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–¥—É–ª—å: {module_name}")
            return False
            
        logger.info(f"–í—ã–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å {module_name}")
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è
        commands_to_remove = []
        for cmd, data in self.bot.commands.items():
            if data.get("module"):
                if data.get("module").lower() == module_name.lower():
                    commands_to_remove.append(cmd)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {commands_to_remove}")
        
        for cmd in commands_to_remove:
            del self.bot.commands[cmd]
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ {cmd} —É–¥–∞–ª–µ–Ω–∞")
        
        # –£–¥–∞–ª—è–µ–º –º–æ–¥—É–ª—å –∏–∑ sys.modules
        if module_name in sys.modules:
            del sys.modules[module_name]
            logger.info(f"–ú–æ–¥—É–ª—å {module_name} —É–¥–∞–ª–µ–Ω –∏–∑ sys.modules")
        
        # –£–¥–∞–ª—è–µ–º –º–æ–¥—É–ª—å –∏–∑ self.bot.modules
        if module_name in self.bot.modules:
            del self.bot.modules[module_name]
            logger.info(f"–ú–æ–¥—É–ª—å {module_name} —É–¥–∞–ª–µ–Ω –∏–∑ self.bot.modules")
        
        # –£–¥–∞–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è
        if module_name in self.bot.module_descriptions:
            del self.bot.module_descriptions[module_name]
            logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è {module_name} —É–¥–∞–ª–µ–Ω–æ")
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.bot.db.delete_module_info(module_name)
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ {module_name} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î")
        
        logger.info(f"–ú–æ–¥—É–ª—å {module_name} –≤—ã–≥—Ä—É–∂–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏")
        return True

    async def load_module(self, event):
        if not event.is_reply:
            await event.edit("[‚ÑπÔ∏è](emoji/5422439311196834318) **–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –º–æ–¥—É–ª—è!**")
            return

        reply = await event.get_reply_message()
        if not reply.document or not reply.document.mime_type == "text/x-python":
            await event.edit("[üö´](emoji/5240241223632954241) **–≠—Ç–æ –Ω–µ Python-—Ñ–∞–π–ª!**")
            return

        user_info = await self.get_user_info(event)
        is_premium = user_info["premium"]

        file_name = None
        for attr in reply.document.attributes:
            if isinstance(attr, types.DocumentAttributeFilename):
                file_name = attr.file_name
                break
        
        if not file_name:
            await event.edit("[üö´](emoji/5240241223632954241) **–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞!**")
            return

        module_name = os.path.basename(file_name).replace(".py", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º–Ω—ã–º
        if module_name in self.bot.core_modules:
            await event.edit("[üö´](emoji/5240241223632954241) **–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–¥—É–ª—å!**")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await event.edit(f"[‚åõÔ∏è](emoji/{self.loader_emoji_id}) **–ó–∞–≥—Ä—É–∂–∞—é** `{module_name}` **...**")
        
        temp_dir = Path("temp_modules")
        temp_dir.mkdir(exist_ok=True)
        temp_file = temp_dir / file_name
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            module_file = await reply.download_media(file=str(temp_file))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            deps_success = await self.check_and_install_dependencies(module_file, event, is_premium)
            if not deps_success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è {module_name}")
                return
            
            # –í—ã–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            await self.unload_existing_module(module_name)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            await event.edit(f"[‚åõÔ∏è](emoji/{self.loader_emoji_id}) **–ó–∞–ø—É—Å–∫–∞—é ...**")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            async def load_module_task():
                start_time = time.time()
                before_commands = set(self.bot.commands.keys())
                logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏: {len(before_commands)}")
                
                spec = importlib.util.spec_from_file_location(module_name, module_file)
                module = importlib.util.module_from_spec(spec)
                
                spec.loader.exec_module(module)
                
                if not hasattr(module, 'setup'):
                    raise Exception("–í –º–æ–¥—É–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è setup()")
                
                final_path = Path("modules") / file_name
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if final_path.exists():
                    os.remove(final_path)
                
                os.rename(module_file, final_path)
                module_file_path = str(final_path)
                
                spec = importlib.util.spec_from_file_location(module_name, module_file_path)
                module = importlib.util.module_from_spec(spec)
                sys.modules[module_name] = module
                spec.loader.exec_module(module)
                
                module.setup(self.bot)
                    
                after_commands = set(self.bot.commands.keys())
                new_commands = after_commands - before_commands
                
                logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {len(after_commands)}")
                logger.info(f"–ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: {new_commands}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ
                if hasattr(module, 'get_module_info'):
                    module_info = module.get_module_info()
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    self.bot.db.set_module_info(
                        module_info['name'],
                        module_info['developer'],
                        module_info['version'],
                        module_info['description'],
                        module_info['commands'],
                        False  # is_stock = False –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
                    )
                else:
                    module_info = {
                        "name": module_name,
                        "description": self.bot.module_descriptions.get(module_name, ""),
                        "commands": [{
                            "command": cmd, 
                            "description": self.bot.commands[cmd].get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                        } for cmd in new_commands],
                        "version": "1.0.0",
                        "developer": "@BotHuekka"
                    }
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    self.bot.db.set_module_info(
                        module_info['name'],
                        module_info['developer'],
                        module_info['version'],
                        module_info['description'],
                        module_info['commands'],
                        False  # is_stock = False –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
                    )
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î
                found_name, module_info = await self.find_module_info(module_name)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                if module_info:
                    loaded_message = loader_format.format_loaded_message(
                        module_info, is_premium, self.loaded_emoji_id, 
                        self.get_random_smile(), self.command_emoji_id, self.dev_emoji_id,
                        self.bot.command_prefix
                    )
                    logger.info(f"–ú–æ–¥—É–ª—å {found_name} –∑–∞–≥—Ä—É–∂–µ–Ω (–∫–æ–º–∞–Ω–¥: {len(new_commands)})")
                else:
                    module_info = {
                        "name": module_name,
                        "description": "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                        "commands": [{
                            "command": cmd, 
                            "description": self.bot.commands[cmd].get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                        } for cmd in new_commands],
                        "version": "1.0.0",
                        "developer": "@BotHuekka"
                    }
                    loaded_message = loader_format.format_loaded_message(
                        module_info, is_premium, self.loaded_emoji_id, 
                        self.get_random_smile(), self.command_emoji_id, self.dev_emoji_id,
                        self.bot.command_prefix
                    )
                
                return loaded_message
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥—É–ª—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            loaded_message = await self.animate_loading_until_done(
                event, "–ó–∞–ø—É—Å–∫–∞—é ...", is_premium, load_module_task()
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await event.edit(loaded_message)
                
        except Exception as e:
            error_trace = traceback.format_exc()
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: {str(e)}\n{error_trace}")
            
            if 'module_file' in locals() and os.path.exists(module_file):
                try:
                    os.remove(module_file)
                except:
                    pass
                    
            modules_path = Path("modules") / file_name
            if modules_path.exists():
                try:
                    os.remove(modules_path)
                except:
                    pass
            
            error_msg = msg.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è", str(e))
            await event.edit(error_msg)
        finally:
            try:
                if temp_file.exists():
                    os.remove(temp_file)
            except:
                pass

    async def unload_module(self, event):
        prefix = self.bot.command_prefix
        
        args = event.text.split()
        if len(args) < 2:
            await event.edit(f"‚ÑπÔ∏è **–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è:** `{prefix}ulm ModuleName`")
            return

        module_query = " ".join(args[1:]).strip()
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        found_name, module_info = await self.find_module_info(module_query)
        
        module_path = None
        if not found_name:
            found_file = self.find_module_file(module_query)
            if found_file:
                for loaded_name in self.bot.modules.keys():
                    if loaded_name.lower() == found_file.stem.lower():
                        found_name = loaded_name
                        module_info = await self.get_module_info(found_name)
                        break
                else:
                    found_name = found_file.stem

                module_path = found_file

        if not found_name:
            error_msg = msg.error(f"–ú–æ–¥—É–ª—å `{module_query}` –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await event.edit(error_msg)
            return

        if not module_path:
            possible_filenames = self._module_name_to_filename(found_name)
            modules_dir = Path("modules").resolve()
            
            for filename in possible_filenames:
                possible_path = modules_dir / filename
                if possible_path.exists():
                    module_path = possible_path
                    break
            else:
                module_path = self.find_module_file(found_name)

        if not module_path or not module_path.exists():
            error_msg = msg.error(f"–§–∞–π–ª –º–æ–¥—É–ª—è `{found_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await event.edit(error_msg)
            return

        if found_name in self.bot.core_modules:
            error_msg = msg.error(f"–ú–æ–¥—É–ª—å `{found_name}` —è–≤–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–≥—Ä—É–∂–µ–Ω")
            await event.edit(error_msg)
            return

        user_info = await self.get_user_info(event)
        is_premium = user_info["premium"]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        await event.edit(f"[‚åõÔ∏è](emoji/{self.loader_emoji_id}) **–£–¥–∞–ª—è—é** `{found_name}` **...**")
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
        async def unload_module_task():
            start_time = time.time()
            
            if found_name in self.bot.modules:
                commands_to_remove = [
                    cmd for cmd, data in self.bot.commands.items() 
                    if data.get("module") and data.get("module").lower() == found_name.lower()
                ]
                
                for cmd in commands_to_remove:
                    del self.bot.commands[cmd]
            
            if found_name in sys.modules:
                del sys.modules[found_name]
            
            os.remove(module_path)
            
            if found_name in self.bot.modules:
                del self.bot.modules[found_name]
            
            if found_name in self.bot.module_descriptions:
                del self.bot.module_descriptions[found_name]
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.bot.db.delete_module_info(found_name)
            
            elapsed = time.time() - start_time
            if elapsed < self.min_animation_time:
                await asyncio.sleep(self.min_animation_time - elapsed)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
            if is_premium:
                return f"[‚ñ™Ô∏è](emoji/{self.info_emoji_id}) `{found_name}` __—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ__ `{prefix}help` __–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–¥—É–ª–µ–π –∏ –∫–æ–º–∞–Ω–¥.__"
            else:
                return f"‚ñ™Ô∏è `{found_name}` __—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ__ `{prefix}help` __–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–¥—É–ª–µ–π –∏ –∫–æ–º–∞–Ω–¥.__"

        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            await event.edit(f"[‚åõÔ∏è](emoji/{self.loader_emoji_id}) **–ó–∞–ø—É—Å–∫–∞—é ...**")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É –º–æ–¥—É–ª—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            unloaded_message = await self.animate_loading_until_done(
                event, "**–ó–∞–ø—É—Å–∫–∞—é ...**", is_premium, unload_module_task()
            )
            
            await event.edit(unloaded_message)
            
        except Exception as e:
            error_trace = traceback.format_exc()
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: {str(e)}\n{error_trace}")
            error_msg = msg.error("–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è", str(e))
            await event.edit(error_msg)

def setup(bot):
    LoaderModule(bot)
