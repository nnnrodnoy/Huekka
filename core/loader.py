import os
import sys
import importlib
import asyncio
import logging
import sqlite3
import difflib
from pathlib import Path
from telethon import events, types
from telethon.errors import MessageNotModifiedError
import traceback
import time
from config import BotConfig

logger = logging.getLogger("UserBot.Loader")

class LoaderModule:
    def __init__(self, bot):
        self.bot = bot
        
        # ID —ç–º–æ–¥–∑–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.loader_emoji_id = BotConfig.EMOJI_IDS["loader"]
        self.loaded_emoji_id = BotConfig.EMOJI_IDS["loaded"]
        self.command_emoji_id = BotConfig.EMOJI_IDS["command"]
        self.dev_emoji_id = BotConfig.EMOJI_IDS["dev"]
        self.info_emoji_id = BotConfig.EMOJI_IDS["info"]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.min_animation_time = BotConfig.LOADER["min_animation_time"]
        self.delete_delay = BotConfig.LOADER["delete_delay"]
        
        bot.register_command(
            cmd="lm",
            handler=self.load_module,
            description="–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ —Ñ–∞–π–ª–∞",
            module_name="Loader"
        )
        
        bot.register_command(
            cmd="ulm",
            handler=self.unload_module,
            description="–í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å",
            module_name="Loader"
        )
        
        bot.set_module_description("Loader", "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ —Å–º–∞–π–ª–∏–∫–æ–≤
        self.smile_db_path = Path("cash") / "smiles.db"
        self._init_smile_database()

    def get_module_info(self):
        return {
            "name": "Loader",
            "description": "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π",
            "developer": "@BotHuekka",
            "version": "1.0.0",
            "commands": [
                {
                    "command": "lm",
                    "description": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ —Ñ–∞–π–ª–∞"
                },
                {
                    "command": "ulm",
                    "description": "–í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å"
                }
            ]
        }

    def _init_smile_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã —Å–º–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"""
        os.makedirs("cash", exist_ok=True)
        conn = sqlite3.connect(self.smile_db_path)
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS smiles
                     (id INTEGER PRIMARY KEY, smile TEXT)''')
        if c.execute("SELECT COUNT(*) FROM smiles").fetchone()[0] == 0:
            for smile in BotConfig.DEFAULT_SMILES:
                c.execute("INSERT INTO smiles (smile) VALUES (?)", (smile,))
            conn.commit()
        conn.close()

    def get_random_smile(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–º–∞–π–ª–∞"""
        conn = sqlite3.connect(self.smile_db_path)
        smile = conn.cursor().execute(
            "SELECT smile FROM smiles ORDER BY RANDOM() LIMIT 1"
        ).fetchone()[0]
        conn.close()
        return smile

    async def get_user_info(self, event):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            user = await event.get_sender()
            return {
                "premium": user.premium if hasattr(user, 'premium') else False,
                "username": user.username or f"id{user.id}"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {str(e)}")
            return {"premium": False, "username": "unknown"}

    async def find_module_info(self, module_name):
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏–º–µ–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (–Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–º—è –º–æ–¥—É–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        """
        normalized_query = module_name.lower().strip()
        
        # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if module_name in self.bot.modules:
            return module_name, await self.get_module_info(module_name)
        
        # –ü–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        for name in self.bot.modules.keys():
            if name.lower() == normalized_query:
                return name, await self.get_module_info(name)
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        file_name = normalized_query.replace('.py', '')
        for name in self.bot.modules.keys():
            if name.lower() == file_name:
                return name, await self.get_module_info(name)
        
        # –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫
        closest = difflib.get_close_matches(
            normalized_query,
            [name.lower() for name in self.bot.modules.keys()],
            n=1,
            cutoff=0.3
        )
        
        if closest:
            for name in self.bot.modules.keys():
                if name.lower() == closest[0]:
                    return name, await self.get_module_info(name)
        
        return None, None

    async def get_module_info(self, module_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ"""
        if module_name not in self.bot.modules:
            return None
            
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–∞–º–æ–≥–æ –º–æ–¥—É–ª—è
        try:
            module = sys.modules.get(module_name)
            if module and hasattr(module, 'get_module_info'):
                return module.get_module_info()
        except Exception:
            pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        commands = []
        for cmd, data in self.bot.modules[module_name].items():
            commands.append({
                "command": cmd,
                "description": data.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
            })
        
        return {
            "name": module_name,
            "description": self.bot.module_descriptions.get(module_name, ""),
            "commands": commands,
            "is_stock": module_name in self.bot.core_modules,
            "version": "1.0.0",
            "developer": "@BotHuekka"
        }

    async def format_module_loaded_message(self, module_info, event):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –º–æ–¥—É–ª–µ"""
        user_info = await self.get_user_info(event)
        is_premium = user_info["premium"]
        prefix = self.bot.command_prefix
        
        text = ""
        if is_premium:
            text += f"[üåò](emoji/{self.loaded_emoji_id}) "
        text += f"**{module_info['name']} –∑–∞–≥—Ä—É–∂–µ–Ω (v{module_info['version']})**\n"
        
        if module_info['description']:
            text += f"__{module_info['description']}__\n"
            
        text += f"__{self.get_random_smile()}__\n\n"
        
        for cmd in module_info['commands']:
            if is_premium:
                text += f"[‚ñ´Ô∏è](emoji/{self.command_emoji_id}) "
            else:
                text += "‚ñ´Ô∏è "
                
            text += f"`{prefix}{cmd['command']}` - __{cmd['description']}__\n"
        
        text += "\n"
        if is_premium:
            text += f"[ü´∂](emoji/{self.dev_emoji_id}) "
        else:
            text += "ü´∂ "
        text += f"**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** {module_info['developer']}"
        
        return text

    async def format_module_unloaded_message(self, module_name, event):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è"""
        user_info = await self.get_user_info(event)
        is_premium = user_info["premium"]
        prefix = self.bot.command_prefix
        
        text = ""
        if is_premium:
            text += f"[‚ñ™Ô∏è](emoji/{self.info_emoji_id})"
        else:
            text += "‚ñ™Ô∏è"
        
        text += f"**–ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.**\n"
        text += f"__(–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `{prefix}help` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–¥—É–ª–µ–π –∏ –∫–æ–º–∞–Ω–¥.)__"
        
        return text

    async def animate_loading(self, event, message, is_premium):
        """–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏/–≤—ã–≥—Ä—É–∑–∫–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–∫–∞–∑–∞"""
        animation = ["/", "-", "\\", "|"]
        start_time = time.time()
        i = 0
        
        min_duration = self.min_animation_time
        
        try:
            while time.time() - start_time < min_duration:
                frame = animation[i % len(animation)]
                prefix = f"[‚öôÔ∏è](emoji/{self.loader_emoji_id}) " if is_premium else "‚öôÔ∏è "
                await event.edit(f"{prefix}{message} {frame}")
                i += 1
                await asyncio.sleep(0.3)
        except MessageNotModifiedError:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")

    async def load_module(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .lm"""
        if not event.is_reply:
            await event.edit("‚ÑπÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –º–æ–¥—É–ª—è!")
            return

        reply = await event.get_reply_message()
        if not reply.document or not reply.document.mime_type == "text/x-python":
            await event.edit("üö´ **–≠—Ç–æ –Ω–µ Python-—Ñ–∞–π–ª!**")
            return

        user_info = await self.get_user_info(event)
        is_premium = user_info["premium"]

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        file_name = None
        for attr in reply.document.attributes:
            if isinstance(attr, types.DocumentAttributeFilename):
                file_name = attr.file_name
                break
        
        if not file_name:
            await event.edit("üö´ **–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞!**")
            return

        module_name = os.path.basename(file_name).replace(".py", "")
        
        anim_task = asyncio.create_task(
            self.animate_loading(event, f"–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥—É–ª—å `{module_name}`", is_premium)
        )

        # –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        temp_dir = Path("temp_modules")
        temp_dir.mkdir(exist_ok=True)
        temp_file = temp_dir / file_name
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            module_file = await reply.download_media(file=str(temp_file))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª—å –Ω–∞ –æ—à–∏–±–∫–∏
            start_time = time.time()
            before_commands = set(self.bot.commands.keys())
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            spec = importlib.util.spec_from_file_location(module_name, module_file)
            module = importlib.util.module_from_spec(spec)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—à–∏–±–∫–∏
            spec.loader.exec_module(module)
            
            if not hasattr(module, 'setup'):
                raise Exception("–í –º–æ–¥—É–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è setup()")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ setup
            test_bot = type('TestBot', (), {})()
            test_bot.commands = {}
            test_bot.modules = {}
            test_bot.module_descriptions = {}
            
            def mock_register_command(cmd, handler, description="", module_name="Test"):
                test_bot.commands[cmd] = {
                    "handler": handler,
                    "description": description,
                    "module": module_name
                }
            
            test_bot.register_command = mock_register_command
            test_bot.set_module_description = lambda name, desc: None
            
            # –í—ã–∑—ã–≤–∞–µ–º setup –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –±–æ—Ç–µ
            module.setup(test_bot)
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –æ—à–∏–±–æ–∫ –Ω–µ—Ç - –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É modules
            final_path = Path("modules") / file_name
            os.rename(module_file, final_path)
            module_file = str(final_path)
            
            # –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ
            spec = importlib.util.spec_from_file_location(module_name, module_file)
            module = importlib.util.module_from_spec(spec)
            sys.modules[module_name] = module
            spec.loader.exec_module(module)
            
            module.setup(self.bot)
                
            after_commands = set(self.bot.commands.keys())
            new_commands = after_commands - before_commands
            
            found_name, module_info = await self.find_module_info(module_name)
            
            elapsed = time.time() - start_time
            if elapsed < self.min_animation_time:
                await asyncio.sleep(self.min_animation_time - elapsed)
            
            if module_info:
                loaded_message = await self.format_module_loaded_message(module_info, event)
                await event.edit(loaded_message)
                logger.info(f"–ú–æ–¥—É–ª—å {found_name} –∑–∞–≥—Ä—É–∂–µ–Ω (–∫–æ–º–∞–Ω–¥: {len(new_commands)})")
            else:
                module_info = {
                    "name": module_name,
                    "description": "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                    "commands": [{
                        "command": cmd, 
                        "description": self.bot.commands[cmd].get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                    } for cmd in new_commands],
                    "version": "1.0.0",
                    "developer": "@BotHuekka"
                }
                loaded_message = await self.format_module_loaded_message(module_info, event)
                await event.edit(loaded_message)
                
        except Exception as e:
            error_trace = traceback.format_exc()
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: {str(e)}\n{error_trace}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if 'module_file' in locals() and os.path.exists(module_file):
                try:
                    os.remove(module_file)
                except:
                    pass
                    
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ modules, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –æ–∫–∞–∑–∞–ª—Å—è
            modules_path = Path("modules") / file_name
            if modules_path.exists():
                try:
                    os.remove(modules_path)
                except:
                    pass
            
            await event.edit(
                f"üö´ **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è:** ```{str(e)}```\n"
                "‚ÑπÔ∏è **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.**"
            )
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            try:
                if temp_file.exists():
                    os.remove(temp_file)
            except:
                pass
                
            if not anim_task.done():
                anim_task.cancel()

    async def unload_module(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .ulm"""
        prefix = self.bot.command_prefix
        
        args = event.text.split()
        if len(args) < 2:
            await event.edit(f"‚ÑπÔ∏è **–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è:** `{prefix}ulm ModuleName`")
            return

        module_query = " ".join(args[1:]).strip()
        
        found_name, module_info = await self.find_module_info(module_query)
        
        if not found_name:
            await event.edit(f"üö´ **–ú–æ–¥—É–ª—å** `{module_query}` –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        module_path = f"modules/{found_name}.py"
        
        if not os.path.exists(module_path):
            await event.edit(f"üö´ **–ú–æ–¥—É–ª—å** `{found_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        user_info = await self.get_user_info(event)
        is_premium = user_info["premium"]

        anim_task = asyncio.create_task(
            self.animate_loading(event, f"–£–¥–∞–ª—è—é –º–æ–¥—É–ª—å `{found_name}`", is_premium)
        )

        try:
            start_time = time.time()
            
            commands_to_remove = [
                cmd for cmd, data in self.bot.commands.items() 
                if data.get("module") and data.get("module").lower() == found_name.lower()
            ]
            
            for cmd in commands_to_remove:
                del self.bot.commands[cmd]
            
            if found_name in sys.modules:
                del sys.modules[found_name]
            
            os.remove(module_path)
            
            if found_name in self.bot.modules:
                del self.bot.modules[found_name]
            
            if found_name in self.bot.module_descriptions:
                del self.bot.module_descriptions[found_name]
            
            elapsed = time.time() - start_time
            if elapsed < self.min_animation_time:
                await asyncio.sleep(self.min_animation_time - elapsed)
            
            unloaded_message = await self.format_module_unloaded_message(found_name, event)
            message = await event.edit(unloaded_message)
            
            await asyncio.sleep(self.delete_delay)
            await message.delete()
            
        except Exception as e:
            error_trace = traceback.format_exc()
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: {str(e)}\n{error_trace}")
            await event.edit(
                f"üö´ **–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è:** ```{str(e)}```\n"
                "‚ÑπÔ∏è **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.**"
            )
        finally:
            if not anim_task.done():
                anim_task.cancel()

def get_module_info():
    return {
        "name": "Loader",
        "description": "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π",
        "developer": "@BotHuekka",
        "version": "1.0.0",
        "commands": [
            {
                "command": "lm",
                "description": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ —Ñ–∞–π–ª–∞"
            },
            {
                "command": "ulm",
                "description": "–í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å"
            }
        ]
    }

def setup(bot):
    LoaderModule(bot)
