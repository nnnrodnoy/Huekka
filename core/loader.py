# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import os
import sys
import importlib
import asyncio
import logging
import difflib
from pathlib import Path
from telethon import events, types
from telethon.errors import MessageNotModifiedError
import traceback
import time
import random
import re
from config import BotConfig
from core.formatters import loader_format, msg

logger = logging.getLogger("UserBot.Loader")

class LoaderModule:
    def __init__(self, bot):
        self.bot = bot
        
        self.loader_emoji_id = BotConfig.EMOJI_IDS["loader"]
        self.loaded_emoji_id = BotConfig.EMOJI_IDS["loaded"]
        self.command_emoji_id = BotConfig.EMOJI_IDS["command"]
        self.dev_emoji_id = BotConfig.EMOJI_IDS["dev"]
        self.info_emoji_id = BotConfig.EMOJI_IDS["info"]
        self.error_emoji_id = BotConfig.EMOJI_IDS["error"]
        
        self.min_animation_time = BotConfig.LOADER["min_animation_time"]
        self.delete_delay = BotConfig.LOADER["delete_delay"]
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–º–µ–Ω –º–æ–¥—É–ª–µ–π –∏ —Ñ–∞–π–ª–æ–≤
        if not hasattr(bot, 'module_files'):
            bot.module_files = {}
        
        bot.register_command(
            cmd="lm",
            handler=self.load_module,
            description="–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ —Ñ–∞–π–ª–∞",
            module_name="Loader"
        )
        
        bot.register_command(
            cmd="ulm",
            handler=self.unload_module,
            description="–í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –ø–æ –∏–º–µ–Ω–∏",
            module_name="Loader"
        )
        
        bot.set_module_description("Loader", "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –≤—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π")

    def get_random_smile(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–º–∞–π–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return random.choice(BotConfig.DEFAULT_SMILES)

    async def get_user_info(self, event):
        try:
            user = await event.get_sender()
            return {
                "premium": user.premium if hasattr(user, 'premium') else False,
                "username": user.username or f"id{user.id}"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {str(e)}")
            return {"premium": False, "username": "unknown"}

    async def find_module_info(self, module_name):
        normalized_query = module_name.lower().strip()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if module_name in self.bot.modules:
            return module_name, await self.get_module_info(module_name)
        
        # –ò—â–µ–º –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        for name in self.bot.modules.keys():
            if name.lower() == normalized_query:
                return name, await self.get_module_info(name)
        
        # –ò—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        closest = difflib.get_close_matches(
            normalized_query,
            [name.lower() for name in self.bot.modules.keys()],
            n=1,
            cutoff=0.6  # –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        )
        
        if closest:
            for name in self.bot.modules.keys():
                if name.lower() == closest[0]:
                    return name, await self.get_module_info(name)
        
        return None, None

    async def get_module_info(self, module_name):
        if module_name not in self.bot.modules:
            return None
            
        try:
            module = sys.modules.get(module_name)
            if module and hasattr(module, 'get_module_info'):
                info = module.get_module_info()
                return info
        except Exception:
            pass
        
        commands = []
        for cmd, data in self.bot.modules[module_name].items():
            commands.append({
                "command": cmd,
                "description": data.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
            })
        
        return {
            "name": module_name,
            "description": self.bot.module_descriptions.get(module_name, ""),
            "commands": commands,
            "is_stock": module_name in self.bot.core_modules,
            "version": "1.0.0",
            "developer": "@BotHuekka"
        }

    async def animate_loading_until_done(self, event, message, is_premium, coroutine):
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω—ã"""
        animation = ["/", "-", "\\", "|"]
        i = 0
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        anim_task = asyncio.create_task(self._run_animation(event, message, is_premium, animation))
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É
            result = await coroutine
            return result
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            if not anim_task.done():
                anim_task.cancel()

    async def _run_animation(self, event, message, is_premium, animation):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é"""
        i = 0
        try:
            while True:
                frame = animation[i % len(animation)]
                prefix = f"[‚öôÔ∏è](emoji/{self.loader_emoji_id}) " if is_premium else "‚öôÔ∏è "
                await event.edit(f"{prefix}{message} {frame}")
                i += 1
                await asyncio.sleep(0.3)
        except MessageNotModifiedError:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")

    async def check_and_install_dependencies(self, module_file, event, is_premium):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è"""
        if not hasattr(self.bot, 'dependency_installer'):
            return True
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        async def install_deps():
            installed, errors = await self.bot.dependency_installer.install_dependencies(module_file)
            
            if errors:
                error_list = "\n".join([f"‚Ä¢ {error}" for error in errors[:3]])
                raise Exception(f"–û—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:\n{error_list}")
            
            return True
            
        try:
            return await self.animate_loading_until_done(
                event, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", is_premium, install_deps()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {str(e)}")
            await event.edit(f"[‚ùå](emoji/5210952531676504517) {str(e)}")
            return False

    async def unload_existing_module(self, module_name):
        """–í—ã–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º"""
        if module_name in self.bot.modules:
            # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è
            commands_to_remove = [
                cmd for cmd, data in self.bot.commands.items() 
                if data.get("module") and data.get("module").lower() == module_name.lower()
            ]
            
            for cmd in commands_to_remove:
                del self.bot.commands[cmd]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ sys.modules –µ—Å–ª–∏ –µ—Å—Ç—å
            if module_name in sys.modules:
                del sys.modules[module_name]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ bot.modules –µ—Å–ª–∏ –µ—Å—Ç—å
            if module_name in self.bot.modules:
                del self.bot.modules[module_name]
            
            # –£–¥–∞–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if module_name in self.bot.module_descriptions:
                del self.bot.module_descriptions[module_name]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ module_files –µ—Å–ª–∏ –µ—Å—Ç—å
            if module_name in self.bot.module_files:
                del self.bot.module_files[module_name]
            
            logger.info(f"–ú–æ–¥—É–ª—å {module_name} –≤—ã–≥—Ä—É–∂–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏")

    async def unload_module(self, event):
        """–í—ã–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª—å –ø–æ –∏–º–µ–Ω–∏"""
        args = event.text.split(" ", 1)
        if len(args) < 2:
            await event.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.")
            return

        module_name = args[1].strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–º
        if module_name not in self.bot.modules:
            await event.edit(f"‚ùå –ú–æ–¥—É–ª—å `{module_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        if module_name in self.bot.core_modules:
            await event.edit(f"‚ùå –ú–æ–¥—É–ª—å `{module_name}` —è–≤–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–≥—Ä—É–∂–µ–Ω.")
            return

        try:
            # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è
            commands_to_remove = []
            for cmd, data in self.bot.commands.items():
                if data.get("module") and data.get("module").lower() == module_name.lower():
                    commands_to_remove.append(cmd)
                    
            for cmd in commands_to_remove:
                del self.bot.commands[cmd]

            # –£–¥–∞–ª—è–µ–º –∏–∑ sys.modules
            if module_name in sys.modules:
                del sys.modules[module_name]

            # –£–¥–∞–ª—è–µ–º –∏–∑ bot.modules
            if module_name in self.bot.modules:
                del self.bot.modules[module_name]

            # –£–¥–∞–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è
            if module_name in self.bot.module_descriptions:
                del self.bot.module_descriptions[module_name]

            # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –º–æ–¥—É–ª—è
            file_removed = False
            if module_name in self.bot.module_files:
                file_path = self.bot.module_files[module_name]
                if os.path.exists(file_path):
                    os.remove(file_path)
                    file_removed = True
                del self.bot.module_files[module_name]

            file_msg = " –∏ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω" if file_removed else ""
            await event.edit(f"‚úÖ –ú–æ–¥—É–ª—å `{module_name}` —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω{file_msg}.")

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è: {str(e)}"
            await event.edit(error_msg)
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {module_name}: {str(e)}")

    async def load_module(self, event):
        if not event.is_reply:
            await event.edit("[‚ÑπÔ∏è](emoji/5422439311196834318) **–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –º–æ–¥—É–ª—è!**")
            return

        reply = await event.get_reply_message()
        if not reply.document or not reply.document.mime_type == "text/x-python":
            await event.edit("[üö´](emoji/5240241223632954241) **–≠—Ç–æ –Ω–µ Python-—Ñ–∞–π–ª!**")
            return

        user_info = await self.get_user_info(event)
        is_premium = user_info["premium"]

        file_name = None
        for attr in reply.document.attributes:
            if isinstance(attr, types.DocumentAttributeFilename):
                file_name = attr.file_name
                break
        
        if not file_name:
            await event.edit("[üö´](emoji/5240241223632954241) **–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞!**")
            return

        module_name = os.path.basename(file_name).replace(".py", "")
        
        temp_dir = Path("temp_modules")
        temp_dir.mkdir(exist_ok=True)
        temp_file = temp_dir / file_name
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            module_file = await reply.download_media(file=str(temp_file))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            deps_success = await self.check_and_install_dependencies(module_file, event, is_premium)
            if not deps_success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è {module_name}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–æ–¥—É–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            final_path = Path("modules") / file_name
            if final_path.exists():
                # –í—ã–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å
                await self.unload_existing_module(module_name)
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
                os.remove(final_path)
                logger.info(f"–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –º–æ–¥—É–ª—è {module_name} —É–¥–∞–ª–µ–Ω–∞")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            async def load_module_task():
                start_time = time.time()
                before_commands = set(self.bot.commands.keys())
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É modules
                os.rename(module_file, final_path)
                module_file_path = str(final_path)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å
                spec = importlib.util.spec_from_file_location(module_name, module_file_path)
                module = importlib.util.module_from_spec(spec)
                sys.modules[module_name] = module
                spec.loader.exec_module(module)
                
                if not hasattr(module, 'setup'):
                    raise Exception("–í –º–æ–¥—É–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è setup()")
                
                module.setup(self.bot)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –º–æ–¥—É–ª—è
                self.bot.module_files[module_name] = module_file_path
                    
                after_commands = set(self.bot.commands.keys())
                new_commands = after_commands - before_commands
                
                found_name, module_info = await self.find_module_info(module_name)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                if module_info:
                    loaded_message = loader_format.format_loaded_message(
                        module_info, is_premium, self.loaded_emoji_id, 
                        self.get_random_smile(), self.command_emoji_id, self.dev_emoji_id,
                        self.bot.command_prefix
                    )
                    logger.info(f"–ú–æ–¥—É–ª—å {found_name} –∑–∞–≥—Ä—É–∂–µ–Ω (–∫–æ–º–∞–Ω–¥: {len(new_commands)})")
                else:
                    module_info = {
                        "name": module_name,
                        "description": "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                        "commands": [{
                            "command": cmd, 
                            "description": self.bot.commands[cmd].get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                        } for cmd in new_commands],
                        "version": "1.0.0",
                        "developer": "@BotHuekka"
                    }
                    loaded_message = loader_format.format_loaded_message(
                        module_info, is_premium, self.loaded_emoji_id, 
                        self.get_random_smile(), self.command_emoji_id, self.dev_emoji_id,
                        self.bot.command_prefix
                    )
                
                return loaded_message
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥—É–ª—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            loaded_message = await self.animate_loading_until_done(
                event, "–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è", is_premium, load_module_task()
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await event.edit(loaded_message)
                
        except Exception as e:
            error_trace = traceback.format_exc()
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: {str(e)}\n{error_trace}")
            
            if 'module_file' in locals() and os.path.exists(module_file):
                try:
                    os.remove(module_file)
                except:
                    pass
                    
            modules_path = Path("modules") / file_name
            if modules_path.exists():
                try:
                    os.remove(modules_path)
                except:
                    pass
            
            error_msg = msg.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è", str(e))
            await event.edit(error_msg)
        finally:
            try:
                if temp_file.exists():
                    os.remove(temp_file)
            except:
                pass

    def get_module_info(self):
        return {
            "name": "Loader",
            "description": "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –≤—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π",
            "developer": "@BotHuekka",
            "version": "1.0.0",
            "commands": [
                {
                    "command": "lm",
                    "description": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ —Ñ–∞–π–ª–∞"
                },
                {
                    "command": "ulm",
                    "description": "–í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –ø–æ –∏–º–µ–Ω–∏"
                }
            ]
        }

def setup(bot):
    LoaderModule(bot)
