# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import os
import sys
import importlib
import asyncio
import logging
import difflib
from pathlib import Path
from telethon import events, types
from telethon.errors import MessageNotModifiedError
import traceback
import time
import random
import re
import inspect
from config import BotConfig
from core.formatters import loader_format

logger = logging.getLogger("UserBot.Loader")

def get_module_info():
    return {
        "name": "Loader",
        "description": "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –≤—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π",
        "developer": "@BotHuekka",
        "version": "1.0.0",
        "commands": [
            {
                "command": "lm",
                "description": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ —Ñ–∞–π–ª–∞"
            },
            {
                "command": "ulm",
                "description": "–í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –ø–æ –∏–º–µ–Ω–∏"
            }
        ]
    }

MODULE_INFO = get_module_info()

class LoaderModule:
    def __init__(self, bot):
        self.bot = bot
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ emoji ID —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.loader_emoji_id = BotConfig.EMOJI_IDS.get("loader", "5370932688993656500")
        self.loaded_emoji_id = BotConfig.EMOJI_IDS.get("loaded", "5370932688993656500")
        self.command_emoji_id = BotConfig.EMOJI_IDS.get("command", "5370932688993656500")
        self.dev_emoji_id = BotConfig.EMOJI_IDS.get("dev", "5370932688993656500")
        self.info_emoji_id = BotConfig.EMOJI_IDS.get("info", "5422439311196834318")
        self.error_emoji_id = BotConfig.EMOJI_IDS.get("error", "5240241223632954241")
        self.unload_emoji_id = "5251522431977291010"
        
        self.min_animation_time = BotConfig.LOADER.get("min_animation_time", 1.0)
        self.delete_delay = BotConfig.LOADER.get("delete_delay", 5.0)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏–∑ MODULE_INFO
        for cmd_info in MODULE_INFO["commands"]:
            if cmd_info["command"] == "lm":
                bot.register_command(
                    cmd=cmd_info["command"],
                    handler=self.load_module,
                    description=cmd_info["description"],
                    module_name=MODULE_INFO["name"]
                )
            elif cmd_info["command"] == "ulm":
                bot.register_command(
                    cmd=cmd_info["command"],
                    handler=self.unload_module,
                    description=cmd_info["description"],
                    module_name=MODULE_INFO["name"]
                )
        
        bot.set_module_description(MODULE_INFO["name"], MODULE_INFO["description"])

    def get_random_smile(self):
        return random.choice(BotConfig.DEFAULT_SMILES)

    async def get_user_info(self, event):
        try:
            user = await event.get_sender()
            return {
                "premium": user.premium if hasattr(user, 'premium') else False,
                "username": user.username or f"id{user.id}"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {str(e)}")
            return {"premium": False, "username": "unknown"}

    async def find_module_by_name(self, module_query):
        """–ù–∞—Ö–æ–¥–∏—Ç –º–æ–¥—É–ª—å –ø–æ –∏–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"""
        normalized_query = module_query.lower().strip()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if normalized_query in [name.lower() for name in self.bot.modules.keys()]:
            for name in self.bot.modules.keys():
                if name.lower() == normalized_query:
                    return name
        
        # –ò—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        closest = difflib.get_close_matches(
            normalized_query,
            [name.lower() for name in self.bot.modules.keys()],
            n=1,
            cutoff=0.7
        )
        
        if closest:
            for name in self.bot.modules.keys():
                if name.lower() == closest[0]:
                    return name
        
        return None

    async def extract_module_name_from_file(self, file_path):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –º–æ–¥—É–ª—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è
            module_pattern = r'def get_module_info\(\):.*?return\s*{.*?"name":\s*"([^"]+)"'
            match = re.search(module_pattern, content, re.DOTALL)
            if match:
                return match.group(1)
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è
            name_pattern = r'MODULE_NAME\s*=\s*["\']([^"\']+)["\']'
            match = re.search(name_pattern, content)
            if match:
                return match.group(1)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è: {str(e)}")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        return Path(file_path).stem

    async def unload_existing_module(self, module_name):
        """–í—ã–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å"""
        if module_name in self.bot.modules:
            # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è
            commands_to_remove = [
                cmd for cmd, data in self.bot.commands.items() 
                if data.get("module") and data.get("module").lower() == module_name.lower()
            ]
            
            for cmd in commands_to_remove:
                del self.bot.commands[cmd]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ sys.modules
            if module_name in sys.modules:
                del sys.modules[module_name]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ bot.modules
            if module_name in self.bot.modules:
                del self.bot.modules[module_name]
            
            # –£–¥–∞–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è
            if module_name in self.bot.module_descriptions:
                del self.bot.module_descriptions[module_name]
            
            logger.info(f"–ú–æ–¥—É–ª—å {module_name} –≤—ã–≥—Ä—É–∂–µ–Ω")

    async def check_and_install_dependencies(self, module_file, event, is_premium):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è"""
        if not hasattr(self.bot, 'dependency_installer'):
            return True
            
        async def install_deps():
            installed, errors = await self.bot.dependency_installer.install_dependencies(module_file)
            
            if errors:
                error_list = "\n".join([f"‚Ä¢ {error}" for error in errors[:3]])
                raise Exception(f"–û—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:\n{error_list}")
            
            return True
            
        try:
            return await self.animate_loading_until_done(
                event, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", is_premium, install_deps()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {str(e)}")
            await event.edit(f"[‚ùå](emoji/{self.error_emoji_id}) {str(e)}")
            return False

    async def animate_loading_until_done(self, event, message, is_premium, coroutine):
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω—ã"""
        animation = ["/", "-", "\\", "|"]
        i = 0
        
        anim_task = asyncio.create_task(self._run_animation(event, message, is_premium, animation))
        
        try:
            result = await coroutine
            return result
        finally:
            if not anim_task.done():
                anim_task.cancel()

    async def _run_animation(self, event, message, is_premium, animation):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é"""
        i = 0
        try:
            while True:
                frame = animation[i % len(animation)]
                prefix = f"[‚öôÔ∏è](emoji/{self.loader_emoji_id}) " if is_premium else "‚öôÔ∏è "
                await event.edit(f"{prefix}{message} {frame}")
                i += 1
                await asyncio.sleep(0.3)
        except MessageNotModifiedError:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")

    async def load_module(self, event):
        if not event.is_reply:
            await event.edit(f"[‚ÑπÔ∏è](emoji/{self.info_emoji_id}) **–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –º–æ–¥—É–ª—è!**")
            return

        reply = await event.get_reply_message()
        if not reply.document or not reply.document.mime_type == "text/x-python":
            await event.edit(f"[üö´](emoji/{self.error_emoji_id}) **–≠—Ç–æ –Ω–µ Python-—Ñ–∞–π–ª!**")
            return

        user_info = await self.get_user_info(event)
        is_premium = user_info["premium"]

        file_name = None
        for attr in reply.document.attributes:
            if isinstance(attr, types.DocumentAttributeFilename):
                file_name = attr.file_name
                break
        
        if not file_name:
            await event.edit(f"[üö´](emoji/{self.error_emoji_id}) **–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞!**")
            return

        temp_dir = Path("temp_modules")
        temp_dir.mkdir(exist_ok=True)
        temp_file = temp_dir / file_name
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            module_file = await reply.download_media(file=str(temp_file))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –º–æ–¥—É–ª—è –∏–∑ —Ñ–∞–π–ª–∞
            module_name = await self.extract_module_name_from_file(module_file)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            deps_success = await self.check_and_install_dependencies(module_file, event, is_premium)
            if not deps_success:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–æ–¥—É–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            final_path = Path("modules") / file_name
            existing_module = await self.find_module_by_name(module_name)
            
            if existing_module:
                # –í—ã–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å
                await self.unload_existing_module(existing_module)
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
                old_file = Path("modules") / f"{existing_module}.py"
                if old_file.exists():
                    os.remove(old_file)
                    logger.info(f"–°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –º–æ–¥—É–ª—è {existing_module} —É–¥–∞–ª–µ–Ω")
                
                # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î
                self.bot.db.delete_module_info(existing_module)
                logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ {existing_module} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î")
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É modules
            os.rename(module_file, final_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ –≤ –ë–î
            self.bot.db.set_module_info(
                module_name,
                "@BotHuekka",
                "1.0.0",
                "–û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏",
                [],
                False
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            if is_premium:
                success_msg = f"[‚úÖ](emoji/{self.loaded_emoji_id}) **–ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!**\n\n__–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –±–æ—Ç–∞...__"
            else:
                success_msg = f"‚úÖ **–ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!**\n\n__–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –±–æ—Ç–∞...__"
            
            await event.edit(success_msg)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç–∞
            await asyncio.sleep(2)
            await self.bot.restart()
                
        except Exception as e:
            error_trace = traceback.format_exc()
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: {str(e)}\n{error_trace}")
            
            error_msg = f"[‚ùå](emoji/{self.error_emoji_id}) **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è:** {str(e)}"
            await event.edit(error_msg)
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                if temp_file.exists():
                    os.remove(temp_file)
            except:
                pass

    async def unload_module(self, event):
        """–í—ã–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª—å –ø–æ –∏–º–µ–Ω–∏"""
        args = event.text.split(" ", 1)
        if len(args) < 2:
            await event.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.")
            return

        module_query = args[1].strip()
        
        # –ò—â–µ–º –º–æ–¥—É–ª—å —Å —É—á–µ—Ç–æ–º —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        found_module = await self.find_module_by_name(module_query)
        
        if not found_module:
            await event.edit(f"‚ùå –ú–æ–¥—É–ª—å `{module_query}` –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        if found_module in self.bot.core_modules:
            await event.edit(f"‚ùå –ú–æ–¥—É–ª—å `{found_module}` —è–≤–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–≥—Ä—É–∂–µ–Ω.")
            return

        try:
            # –í—ã–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –∏–∑ –ø–∞–º—è—Ç–∏
            await self.unload_existing_module(found_module)
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –º–æ–¥—É–ª—è
            module_file = Path("modules") / f"{found_module}.py"
            if module_file.exists():
                os.remove(module_file)
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î
            self.bot.db.delete_module_info(found_module)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            user_info = await self.get_user_info(event)
            is_premium = user_info["premium"]
            
            if is_premium:
                success_msg = f"[‚úÖ](emoji/{self.unload_emoji_id}) **–ú–æ–¥—É–ª—å {found_module} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!**\n\n__–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –±–æ—Ç–∞...__"
            else:
                success_msg = f"‚úÖ **–ú–æ–¥—É–ª—å {found_module} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!**\n\n__–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –±–æ—Ç–∞...__"
            
            await event.edit(success_msg)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç–∞
            await asyncio.sleep(2)
            await self.bot.restart()

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è: {str(e)}"
            await event.edit(error_msg)
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {found_module}: {str(e)}")

def setup(bot):
    LoaderModule(bot)
