# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import logging
import re
from telethon import types
from telethon.extensions import html
from telethon.errors.rpcerrorlist import MessageNotModifiedError

logger = logging.getLogger("UserBot.Parser")

class CustomParseMode:
    """HTML –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –∏ —Å–ø–æ–π–ª–µ—Ä–æ–≤"""
    def __init__(self):
        pass

    def parse(self, text):
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if not text:
            return "", []
            
        # –°–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –∏ —Å–ø–æ–π–ª–µ—Ä–∞—Ö
        emoji_list = []
        spoiler_list = []

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –∏ —Å–ø–æ–π–ª–µ—Ä–æ–≤
        emoji_pattern = re.compile(r'<emoji\s+document_id\s*=\s*["\']?(\d+)["\']?\s*>(.*?)</emoji>', re.DOTALL)
        spoiler_pattern = re.compile(r'<spoiler>(.*?)</spoiler>', re.DOTALL)

        # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        def emoji_replacer(match):
            doc_id = match.group(1)
            inner_text = match.group(2)
            index = len(emoji_list)
            emoji_list.append((doc_id, inner_text))
            return f"%%EMOJI_{index}%%"

        text = emoji_pattern.sub(emoji_replacer, text)

        # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–æ–π–ª–µ—Ä—ã –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        def spoiler_replacer(match):
            inner_text = match.group(1)
            index = len(spoiler_list)
            spoiler_list.append(inner_text)
            return f"%%SPOILER_{index}%%"

        text = spoiler_pattern.sub(spoiler_replacer, text)

        # –ü–∞—Ä—Å–∏–º HTML
        text, entities = html.parse(text)
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ entities —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
        if entities is None:
            entities = []

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–º–æ–¥–∑–∏
        for index, (doc_id, inner_text) in enumerate(emoji_list):
            placeholder = f"%%EMOJI_{index}%%"
            if placeholder in text:
                start = text.find(placeholder)
                text = text.replace(placeholder, inner_text, 1)
                entity = types.MessageEntityCustomEmoji(
                    offset=start,
                    length=len(inner_text),
                    document_id=int(doc_id)
                )
                entities.append(entity)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–æ–π–ª–µ—Ä—ã
        for index, inner_text in enumerate(spoiler_list):
            placeholder = f"%%SPOILER_{index}%%"
            if placeholder in text:
                start = text.find(placeholder)
                text = text.replace(placeholder, inner_text, 1)
                entity = types.MessageEntitySpoiler(
                    offset=start,
                    length=len(inner_text)
                )
                entities.append(entity)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ offset (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–Ω–æ—Å—Ç–∏)
        if entities:
            entities.sort(key=lambda e: e.offset)

        return text, entities

    def unparse(self, text, entities):
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ entities —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
        if entities is None:
            entities = []
            
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        if not text:
            return ""

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ
        normal_entities = []
        custom_emoji_entities = []
        spoiler_entities = []

        for entity in entities:
            if isinstance(entity, types.MessageEntityCustomEmoji):
                custom_emoji_entities.append(entity)
            elif isinstance(entity, types.MessageEntitySpoiler):
                spoiler_entities.append(entity)
            else:
                normal_entities.append(entity)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π HTML unparse –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
        text = html.unparse(text, normal_entities or None)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∏ —Å–ø–æ–π–ª–µ—Ä—ã —Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞—Ç—å offsets
        custom_emoji_entities.sort(key=lambda e: e.offset, reverse=True)
        spoiler_entities.sort(key=lambda e: e.offset, reverse=True)

        for entity in custom_emoji_entities:
            start = entity.offset
            end = start + entity.length
            inner_text = text[start:end]
            tag = f'<emoji document_id="{entity.document_id}">{inner_text}</emoji>'
            text = text[:start] + tag + text[end:]

        for entity in spoiler_entities:
            start = entity.offset
            end = start + entity.length
            inner_text = text[start:end]
            tag = f'<spoiler>{inner_text}</spoiler>'
            text = text[:start] + tag + text[end:]

        return text

class EmojiHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏"""
    @staticmethod
    async def process_message(event):
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not hasattr(event, 'text') or not event.text or event.text.startswith('.'):
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ
            if '<emoji' not in event.text:
                return
                
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç–º–æ–¥–∑–∏
            await event.edit(event.text)
        except MessageNotModifiedError:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º–æ–¥–∑–∏: {str(e)}", exc_info=True)

    @classmethod
    async def process_command_output(cls, text):
        return text
