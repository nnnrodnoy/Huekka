# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import logging
import re
from telethon import types
from telethon.extensions import html
from telethon.errors.rpcerrorlist import MessageNotModifiedError

logger = logging.getLogger("UserBot.Parser")

class CustomHtmlParser:
    """–ß–∏—Å—Ç—ã–π HTML –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –∏ —Å–ø–æ–π–ª–µ—Ä–æ–≤"""
    
    def __init__(self):
        pass

    def parse(self, text):
        """–ü–∞—Ä—Å–∏–Ω–≥ HTML —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–µ–∫—Å—Ç –∏ —Å—É—â–Ω–æ—Å—Ç–∏"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –≤ HTML —Ñ–æ—Ä–º–∞—Ç
        text = self._convert_emoji_markers_to_html(text)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π HTML –ø–∞—Ä—Å–µ—Ä Telethon
        text, entities = html.parse(text)
        new_entities = []
        
        for entity in entities:
            if isinstance(entity, types.MessageEntityTextUrl):
                if entity.url == 'spoiler':
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º <a href="spoiler">Text</a> –≤ —Å—É—â–Ω–æ—Å—Ç—å —Å–ø–æ–π–ª–µ—Ä–∞
                    new_entities.append(types.MessageEntitySpoiler(
                        offset=entity.offset,
                        length=entity.length
                    ))
                elif entity.url.startswith('emoji/'):
                    try:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º <a href="emoji/ID">Text</a> –≤ —Å—É—â–Ω–æ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
                        emoji_id = int(entity.url.split('/')[1])
                        new_entities.append(types.MessageEntityCustomEmoji(
                            offset=entity.offset,
                            length=entity.length,
                            document_id=emoji_id
                        ))
                    except (ValueError, IndexError):
                        logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID —ç–º–æ–¥–∑–∏: {entity.url}")
                        new_entities.append(entity)
                else:
                    new_entities.append(entity)
            else:
                new_entities.append(entity)
                
        return text, new_entities

    def unparse(self, text, entities):
        """–û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ HTML"""
        converted_entities = []
        for entity in entities or []:
            if isinstance(entity, types.MessageEntityCustomEmoji):
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ HTML —Å—Å—ã–ª–∫–∏
                converted_entities.append(types.MessageEntityTextUrl(
                    offset=entity.offset,
                    length=entity.length,
                    url=f'emoji/{entity.document_id}'
                ))
            elif isinstance(entity, types.MessageEntitySpoiler):
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–æ–π–ª–µ—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ HTML —Å—Å—ã–ª–∫–∏
                converted_entities.append(types.MessageEntityTextUrl(
                    offset=entity.offset,
                    length=entity.length,
                    url='spoiler'
                ))
            else:
                converted_entities.append(entity)
        
        return html.unparse(text, converted_entities)

    def _convert_emoji_markers_to_html(self, text):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã —ç–º–æ–¥–∑–∏ –≤ HTML —Ñ–æ—Ä–º–∞—Ç"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º <emoji document_id=5370932688993656500>üåï</emoji> –≤ <a href="emoji/5370932688993656500">üåï</a>
        text = re.sub(
            r'<emoji\s+document_id\s*=\s*["\']?(\d+)["\']?\s*>(.*?)</emoji>',
            r'<a href="emoji/\1">\2</a>',
            text,
            flags=re.DOTALL
        )
        return text

class EmojiHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏ –¥–ª—è HTML"""
    
    @staticmethod
    async def process_message(event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Ä–∫–µ—Ä–æ–≤ —ç–º–æ–¥–∑–∏"""
        try:
            if not event.text:
                return
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞)
            if event.text.startswith('.'):
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ —ç–º–æ–¥–∑–∏
            if '<emoji document_id=' in event.text:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤ HTML —Ñ–æ—Ä–º–∞—Ç
                new_text = EmojiHandler.convert_emoji_markers(event.text)
                
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if new_text != event.text:
                    await event.edit(new_text)
                    
        except MessageNotModifiedError:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º–æ–¥–∑–∏: {str(e)}", exc_info=True)

    @staticmethod
    def convert_emoji_markers(text):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Ä–∫–µ—Ä—ã —ç–º–æ–¥–∑–∏ –≤ HTML —Ñ–æ—Ä–º–∞—Ç"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥, —á—Ç–æ –∏ –≤ –ø–∞—Ä—Å–µ—Ä–µ
        parser = CustomHtmlParser()
        return parser._convert_emoji_markers_to_html(text)

    @classmethod
    async def process_command_output(cls, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è HTML —Ñ–æ—Ä–º–∞—Ç–∞"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –≤ HTML
        text = cls.convert_emoji_markers(text)
        return text

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
CustomParseMode = CustomHtmlParser
