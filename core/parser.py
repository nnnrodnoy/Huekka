# ¬©Ô∏è nnnrodnoy, 2025 –ª–∞–¥–∞–ª–∞–ª–∞–¥–∞
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import logging
import re
from telethon import types
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º markdown –Ω–∞ html
from telethon.extensions import html 
from telethon.errors.rpcerrorlist import MessageNotModifiedError

logger = logging.getLogger("UserBot.Parser")

class CustomHtmlParser:
    """
    –ß–∏—Å—Ç—ã–π HTML –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: <a href="emoji/ID">Text</a> –∏ <a href="spoiler">Text</a>
    """
    def __init__(self):
        pass

    def parse(self, text):
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º html.parse
        text, entities = html.parse(text)
        new_entities = []
        
        for entity in entities:
            if isinstance(entity, types.MessageEntityTextUrl):
                if entity.url == 'spoiler':
                    new_entities.append(types.MessageEntitySpoiler(
                        offset=entity.offset,
                        length=entity.length
                    ))
                elif entity.url.startswith('emoji/'):
                    try:
                        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ emoji/ID –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ, –æ–Ω–∞ –≤–µ—Ä–Ω–∞
                        doc_id = int(entity.url.split('/')[1])
                        new_entities.append(types.MessageEntityCustomEmoji(
                            offset=entity.offset,
                            length=entity.length,
                            document_id=doc_id
                        ))
                    except (ValueError, IndexError):
                        logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID —ç–º–æ–¥–∑–∏: {entity.url}")
                        new_entities.append(entity)
                else:
                    new_entities.append(entity)
            else:
                new_entities.append(entity)
                
        return text, new_entities

    def unparse(self, text, entities):
        converted_entities = []
        for entity in entities or []:
            if isinstance(entity, types.MessageEntityCustomEmoji):
                converted_entities.append(types.MessageEntityTextUrl(
                    offset=entity.offset,
                    length=entity.length,
                    url=f'emoji/{entity.document_id}'
                ))
            elif isinstance(entity, types.MessageEntitySpoiler):
                converted_entities.append(types.MessageEntityTextUrl(
                    offset=entity.offset,
                    length=entity.length,
                    url='spoiler'
                ))
            else:
                converted_entities.append(entity)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º html.unparse
        return html.unparse(text, converted_entities)

# –£–î–ê–õ–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ _convert_html_emoji_to_markdown –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

class EmojiHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏ (–ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π)"""
    @staticmethod
    async def process_message(event):
        try:
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å HTML: <a href="emoji/..."
            if not event.text or event.text.startswith('.'):
                return
                
            if '](emoji/' not in event.text and '<a href="emoji/' not in event.text:
                return
                
            # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: event.edit() –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä,
            # –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–µ—Ä–µ–¥–∞–¥–∏—Ç–µ –≤ client.send_message –∏–ª–∏ client.edit_message.
            # –ï—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã, —Ç–æ –æ–Ω —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–¥–µ—Å—å.
            await event.edit(event.text)
        except MessageNotModifiedError:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º–æ–¥–∑–∏: {str(e)}", exc_info=True)

    @classmethod
    async def process_command_output(cls, text):
        return text
