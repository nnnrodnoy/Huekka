# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import logging
import re
from telethon import types
from telethon.extensions import html
from telethon.errors.rpcerrorlist import MessageNotModifiedError

logger = logging.getLogger("UserBot.Parser")

class CustomParseMode:
    """–ß–∏—Å—Ç—ã–π HTML –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –∏ —Å–ø–æ–π–ª–µ—Ä–æ–≤"""
    def __init__(self):
        pass

    def parse(self, text):
        if not text:
            return "", []

        # 1. –ó–∞–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–≥–∏ <spoiler>—Ç–µ–∫—Å—Ç</spoiler> –Ω–∞ Markdown-–ø–æ–¥–æ–±–Ω—ã–π TextUrl
        # –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã Telethon –Ω–µ –ø—ã—Ç–∞–ª—Å—è –∏—Ö –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π HTML, –∞
        # –∑–∞—Ç–µ–º –º—ã –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º TextUrl –≤ MessageEntitySpoiler
        text = re.sub(
            r'<spoiler>(.*?)</spoiler>',
            r'[\1](spoiler)',
            text,
            flags=re.DOTALL
        )
        
        # 2. –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç. html.parse –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –í–°–ï:
        #    - HTML —Ç–µ–≥–∏ (<b>, <i>, <u>) –≤ Telethon —Å—É—â–Ω–æ—Å—Ç–∏.
        #    - –ö–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –≤–∏–¥–∞ [—Ç–µ–∫—Å—Ç](emoji/id) –≤ MessageEntityTextUrl.
        #    - –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ø–æ–π–ª–µ—Ä—ã –≤–∏–¥–∞ [—Ç–µ–∫—Å—Ç](spoiler) –≤ MessageEntityTextUrl.
        text, entities = html.parse(text)
        
        if entities is None:
            entities = []

        # 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º MessageEntityTextUrl –æ–±—Ä–∞—Ç–Ω–æ –≤ MessageEntityCustomEmoji –∏ MessageEntitySpoiler
        new_entities = []
        for entity in entities:
            if isinstance(entity, types.MessageEntityTextUrl):
                url = entity.url.lower()
                
                if url == 'spoiler':
                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ MessageEntitySpoiler
                    new_entities.append(types.MessageEntitySpoiler(
                        offset=entity.offset,
                        length=entity.length
                    ))
                elif url.startswith('emoji/'):
                    try:
                        doc_id = int(url.split('/')[1])
                        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ MessageEntityCustomEmoji
                        new_entities.append(types.MessageEntityCustomEmoji(
                            offset=entity.offset,
                            length=entity.length,
                            document_id=doc_id
                        ))
                    except (ValueError, IndexError):
                        logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID —ç–º–æ–¥–∑–∏: {entity.url}")
                        new_entities.append(entity)
                else:
                    new_entities.append(entity)
            else:
                new_entities.append(entity)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ offset
        new_entities.sort(key=lambda e: e.offset)
        
        return text, new_entities

    def unparse(self, text, entities):
        if entities is None:
            entities = []
        if not text:
            return ""

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ TextUrl —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ CustomEmoji/Spoiler
        converted_entities = []
        for entity in entities:
            if isinstance(entity, types.MessageEntityCustomEmoji):
                converted_entities.append(types.MessageEntityTextUrl(
                    offset=entity.offset,
                    length=entity.length,
                    url=f'emoji/{entity.document_id}' # –°–æ—Ö—Ä–∞–Ω—è–µ–º Markdown-–ø–æ–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                ))
            elif isinstance(entity, types.MessageEntitySpoiler):
                converted_entities.append(types.MessageEntityTextUrl(
                    offset=entity.offset,
                    length=entity.length,
                    url='spoiler' # –°–æ—Ö—Ä–∞–Ω—è–µ–º Markdown-–ø–æ–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                ))
            else:
                converted_entities.append(entity)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º html.unparse. –û–Ω –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç:
        # 1. –û–±—ã—á–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ HTML —Ç–µ–≥–∏ (<b>, <i>).
        # 2. –í—Ä–µ–º–µ–Ω–Ω—ã–µ TextUrl (—ç–º–æ–¥–∑–∏/—Å–ø–æ–π–ª–µ—Ä—ã) –≤ Markdown-–ø–æ–¥–æ–±–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å ([—Ç–µ–∫—Å—Ç](url)).
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –≤ HTML, –Ω–æ —ç–º–æ–¥–∑–∏ –∏ —Å–ø–æ–π–ª–µ—Ä—ã –±—É–¥—É—Ç –≤ Markdown-–ø–æ–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
        return html.unparse(text, converted_entities)

class EmojiHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏. –í—ã–∑—ã–≤–∞–µ—Ç edit() –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."""
    @staticmethod
    async def process_message(event):
        try:
            if not hasattr(event, 'text') or not event.text or event.text.startswith('.'):
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Markdown-–ø–æ–¥–æ–±–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–º–æ–¥–∑–∏
            if '](emoji/' not in event.text:
                return
                
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç–º–æ–¥–∑–∏
            await event.edit(event.text)
        except MessageNotModifiedError:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º–æ–¥–∑–∏: {str(e)}", exc_info=True)

    @classmethod
    async def process_command_output(cls, text):
        return text
