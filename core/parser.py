# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import logging
import re
from telethon import types
from telethon.extensions import html
from telethon.errors.rpcerrorlist import MessageNotModifiedError

logger = logging.getLogger("UserBot.Parser")

class CustomParseMode:
    """HTML –ø–∞—Ä—Å–µ—Ä, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å Markdown —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    def __init__(self):
        pass

    def parse(self, text):
        if not text:
            return "", []

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        original_text = text
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è Markdown-–ø–æ–¥–æ–±–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ HTML
        # 1. –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç: **—Ç–µ–∫—Å—Ç** -> <b>—Ç–µ–∫—Å—Ç</b>
        text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text, flags=re.DOTALL)
        
        # 2. –ö—É—Ä—Å–∏–≤: __—Ç–µ–∫—Å—Ç__ -> <i>—Ç–µ–∫—Å—Ç</i>
        text = re.sub(r'__(.*?)__', r'<i>\1</i>', text, flags=re.DOTALL)
        
        # 3. –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ: --—Ç–µ–∫—Å—Ç-- -> <u>—Ç–µ–∫—Å—Ç</u>  
        text = re.sub(r'--(.*?)--', r'<u>\1</u>', text, flags=re.DOTALL)
        
        # 4. –ó–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ: ~~—Ç–µ–∫—Å—Ç~~ -> <s>—Ç–µ–∫—Å—Ç</s>
        text = re.sub(r'~~(.*?)~~', r'<s>\1</s>', text, flags=re.DOTALL)
        
        # 5. –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π: `—Ç–µ–∫—Å—Ç` -> <code>—Ç–µ–∫—Å—Ç</code>
        text = re.sub(r'`(.*?)`', r'<code>\1</code>', text, flags=re.DOTALL)
        
        # 6. –ü—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ```—Ç–µ–∫—Å—Ç``` -> <pre>—Ç–µ–∫—Å—Ç</pre>
        text = re.sub(r'```(.*?)```', r'<pre>\1</pre>', text, flags=re.DOTALL)
        
        # 7. –°—Å—ã–ª–∫–∏: [—Ç–µ–∫—Å—Ç](url) -> <a href="url">—Ç–µ–∫—Å—Ç</a>
        text = re.sub(r'\[(.*?)\]\((.*?)\)', r'<a href="\2">\1</a>', text, flags=re.DOTALL)

        # 8. –ö–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏: [—Ç–µ–∫—Å—Ç](emoji/id) - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏
        emoji_list = []
        emoji_pattern = re.compile(r'\[(.*?)\]\(emoji/(\d+)\)', re.DOTALL)
        
        def emoji_replacer(match):
            inner_text = match.group(1)
            doc_id = match.group(2)
            index = len(emoji_list)
            emoji_list.append((doc_id, inner_text))
            return f"%%EMOJI_{index}%%"

        text = emoji_pattern.sub(emoji_replacer, text)

        # –ü–∞—Ä—Å–∏–º HTML
        try:
            text, entities = html.parse(text)
            if entities is None:
                entities = []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTML –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            return original_text, []

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏
        for index, (doc_id, inner_text) in enumerate(emoji_list):
            placeholder = f"%%EMOJI_{index}%%"
            if placeholder in text:
                start = text.find(placeholder)
                text = text.replace(placeholder, inner_text, 1)
                entity = types.MessageEntityCustomEmoji(
                    offset=start,
                    length=len(inner_text),
                    document_id=int(doc_id)
                )
                entities.append(entity)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ offset
        if entities:
            entities.sort(key=lambda e: e.offset)
        
        return text, entities

    def unparse(self, text, entities):
        if entities is None:
            entities = []
        if not text:
            return ""

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HTML —Å—É—â–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ unparse
        try:
            result = html.unparse(text, entities)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTML unparse: {e}")
            return text

        # –¢–µ–ø–µ—Ä—å –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HTML —Ç–µ–≥–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ Markdown-–ø–æ–¥–æ–±–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
        
        # 1. <b>—Ç–µ–∫—Å—Ç</b> -> **—Ç–µ–∫—Å—Ç**
        result = re.sub(r'<b>(.*?)</b>', r'**\1**', result, flags=re.DOTALL)
        
        # 2. <i>—Ç–µ–∫—Å—Ç</i> -> __—Ç–µ–∫—Å—Ç__
        result = re.sub(r'<i>(.*?)</i>', r'__\1__', result, flags=re.DOTALL)
        
        # 3. <u>—Ç–µ–∫—Å—Ç</u> -> --—Ç–µ–∫—Å—Ç--
        result = re.sub(r'<u>(.*?)</u>', r'--\1--', result, flags=re.DOTALL)
        
        # 4. <s>—Ç–µ–∫—Å—Ç</s> -> ~~—Ç–µ–∫—Å—Ç~~
        result = re.sub(r'<s>(.*?)</s>', r'~~\1~~', result, flags=re.DOTALL)
        
        # 5. <code>—Ç–µ–∫—Å—Ç</code> -> `—Ç–µ–∫—Å—Ç`
        result = re.sub(r'<code>(.*?)</code>', r'`\1`', result, flags=re.DOTALL)
        
        # 6. <pre>—Ç–µ–∫—Å—Ç</pre> -> ```—Ç–µ–∫—Å—Ç```
        result = re.sub(r'<pre>(.*?)</pre>', r'```\1```', result, flags=re.DOTALL)
        
        # 7. <a href="url">—Ç–µ–∫—Å—Ç</a> -> [—Ç–µ–∫—Å—Ç](url)
        result = re.sub(r'<a href="(.*?)">(.*?)</a>', r'[\2](\1)', result, flags=re.DOTALL)

        return result

class EmojiHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏"""
    @staticmethod
    async def process_message(event):
        try:
            if not hasattr(event, 'text') or not event.text or event.text.startswith('.'):
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç](emoji/id)
            if '](emoji/' not in event.text:
                return
                
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç–º–æ–¥–∑–∏
            await event.edit(event.text)
        except MessageNotModifiedError:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º–æ–¥–∑–∏: {str(e)}", exc_info=True)

    @classmethod
    async def process_command_output(cls, text):
        return text
