# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import logging
import re
from telethon import types
from telethon.extensions import html
from telethon.errors.rpcerrorlist import MessageNotModifiedError

logger = logging.getLogger("UserBot.Parser")

class CustomParseMode:
    """HTML –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏"""
    def __init__(self):
        pass

    def parse(self, text):
        if not text:
            return "", []

        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç](emoji/id)
        emoji_list = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç](emoji/id)
        emoji_pattern = re.compile(r'\[(.*?)\]\(emoji/(\d+)\)', re.DOTALL)
        
        # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        def emoji_replacer(match):
            inner_text = match.group(1)
            doc_id = match.group(2)
            index = len(emoji_list)
            emoji_list.append((doc_id, inner_text))
            return f"%%EMOJI_{index}%%"

        text = emoji_pattern.sub(emoji_replacer, text)

        # –ü–∞—Ä—Å–∏–º HTML —Ä–∞–∑–º–µ—Ç–∫—É (<b>, <i>, <u>, <code> –∏ —Ç.–¥.)
        text, entities = html.parse(text)
        
        if entities is None:
            entities = []

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        for index, (doc_id, inner_text) in enumerate(emoji_list):
            placeholder = f"%%EMOJI_{index}%%"
            if placeholder in text:
                start = text.find(placeholder)
                text = text.replace(placeholder, inner_text, 1)
                entity = types.MessageEntityCustomEmoji(
                    offset=start,
                    length=len(inner_text),
                    document_id=int(doc_id)
                )
                entities.append(entity)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ offset
        if entities:
            entities.sort(key=lambda e: e.offset)
        
        return text, entities

    def unparse(self, text, entities):
        if entities is None:
            entities = []
        if not text:
            return ""

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –Ω–∞ –æ–±—ã—á–Ω—ã–µ HTML –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏
        html_entities = []
        emoji_entities = []

        for entity in entities:
            if isinstance(entity, types.MessageEntityCustomEmoji):
                emoji_entities.append(entity)
            else:
                html_entities.append(entity)

        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É
        text = html.unparse(text, html_entities or None)

        # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ (—Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞—Ç—å offsets)
        emoji_entities.sort(key=lambda e: e.offset, reverse=True)
        
        for entity in emoji_entities:
            start = entity.offset
            end = start + entity.length
            inner_text = text[start:end]
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç [—Ç–µ–∫—Å—Ç](emoji/id)
            tag = f'[{inner_text}](emoji/{entity.document_id})'
            text = text[:start] + tag + text[end:]

        return text

class EmojiHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏"""
    @staticmethod
    async def process_message(event):
        try:
            if not hasattr(event, 'text') or not event.text or event.text.startswith('.'):
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç](emoji/id)
            if '](emoji/' not in event.text:
                return
                
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç–º–æ–¥–∑–∏
            await event.edit(event.text)
        except MessageNotModifiedError:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º–æ–¥–∑–∏: {str(e)}", exc_info=True)

    @classmethod
    async def process_command_output(cls, text):
        return text
