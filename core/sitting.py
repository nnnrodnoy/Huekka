import os
import sqlite3
from telethon import events, Button
from config import BotConfig

def setup(bot):
    @bot.register_command("sitting", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", module_name="Settings")
    async def sitting_handler(event):
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            buttons = [
                [Button.inline("1. –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞", b"autoclean_settings")],
                [Button.inline("2. –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫", b"autostart_settings")],
                [Button.inline("3. –ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥", b"prefix_settings")],
                [Button.inline("‚ùå –ó–∞–∫—Ä—ã—Ç—å", b"close_settings")]
            ]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            prefix = bot.command_prefix
            autoclean_enabled = bot.get_config_value('autoclean_enabled', 
                                                   str(BotConfig.AUTOCLEAN["enabled"])).lower() == 'true'
            autoclean_delay = int(bot.get_config_value('autoclean_delay', 
                                                    BotConfig.AUTOCLEAN["default_delay"]))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
            autostart_enabled = False
            bashrc_path = os.path.expanduser("~/.bashrc")
            if os.path.exists(bashrc_path):
                with open(bashrc_path, "r") as f:
                    content = f.read()
                    autostart_enabled = "python main.py" in content and "cd " in content
            
            message = "‚öôÔ∏è **Huekka Settings**\n\n"
            message += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n"
            message += f"üìù –ü—Ä–µ—Ñ–∏–∫—Å: `{prefix}`\n"
            message += f"üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: {'–í–ö–õ' if autoclean_enabled else '–í–´–ö–õ'} ({autoclean_delay} —Å–µ–∫)\n"
            message += f"üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: {'–í–ö–õ' if autostart_enabled else '–í–´–ö–õ'}\n\n"
            message += "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:"
            
            await event.reply(message, buttons=buttons)
        except Exception as e:
            await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
    @bot.client.on(events.CallbackQuery)
    async def settings_callback_handler(event):
        try:
            if event.data == b"close_settings":
                await event.delete()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            prefix = bot.command_prefix
            autoclean_enabled = bot.get_config_value('autoclean_enabled', 
                                                   str(BotConfig.AUTOCLEAN["enabled"])).lower() == 'true'
            autoclean_delay = int(bot.get_config_value('autoclean_delay', 
                                                    BotConfig.AUTOCLEAN["default_delay"]))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
            autostart_enabled = False
            bashrc_path = os.path.expanduser("~/.bashrc")
            if os.path.exists(bashrc_path):
                with open(bashrc_path, "r") as f:
                    content = f.read()
                    autostart_enabled = "python main.py" in content and "cd " in content
            
            if event.data == b"autoclean_settings":
                buttons = [
                    [Button.inline(f"{'‚úÖ' if autoclean_enabled else '‚òëÔ∏è'} –í–∫–ª—é—á–∏—Ç—å", b"autoclean_enable"),
                     Button.inline(f"{'‚úÖ' if not autoclean_enabled else '‚òëÔ∏è'} –í—ã–∫–ª—é—á–∏—Ç—å", b"autoclean_disable")],
                    [Button.inline("‚è± –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", b"autoclean_time")],
                    [Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_main")]
                ]
                
                message = "üßπ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏**\n\n"
                message += f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'–í–ö–õ' if autoclean_enabled else '–í–´–ö–õ'}\n"
                message += f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {autoclean_delay} —Å–µ–∫—É–Ω–¥\n\n"
                message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                
                await event.edit(message, buttons=buttons)
            
            elif event.data == b"autostart_settings":
                buttons = [
                    [Button.inline(f"{'‚úÖ' if autostart_enabled else '‚òëÔ∏è'} –í–∫–ª—é—á–∏—Ç—å", b"autostart_enable"),
                     Button.inline(f"{'‚úÖ' if not autostart_enabled else '‚òëÔ∏è'} –í—ã–∫–ª—é—á–∏—Ç—å", b"autostart_disable")],
                    [Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_main")]
                ]
                
                message = "üöÄ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞**\n\n"
                message += f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'–í–ö–õ' if autostart_enabled else '–í–´–ö–õ'}\n\n"
                message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                
                await event.edit(message, buttons=buttons)
            
            elif event.data == b"prefix_settings":
                buttons = [
                    [Button.inline("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å", b"change_prefix")],
                    [Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_main")]
                ]
                
                message = "üìù **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞**\n\n"
                message += f"–¢–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å: `{prefix}`\n\n"
                message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                
                await event.edit(message, buttons=buttons)
            
            elif event.data == b"back_to_main":
                buttons = [
                    [Button.inline("1. –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞", b"autoclean_settings")],
                    [Button.inline("2. –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫", b"autostart_settings")],
                    [Button.inline("3. –ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥", b"prefix_settings")],
                    [Button.inline("‚ùå –ó–∞–∫—Ä—ã—Ç—å", b"close_settings")]
                ]
                
                message = "‚öôÔ∏è **Huekka Settings**\n\n"
                message += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n"
                message += f"üìù –ü—Ä–µ—Ñ–∏–∫—Å: `{prefix}`\n"
                message += f"üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: {'–í–ö–õ' if autoclean_enabled else '–í–´–ö–õ'} ({autoclean_delay} —Å–µ–∫)\n"
                message += f"üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: {'–í–ö–õ' if autostart_enabled else '–í–´–ö–õ'}\n\n"
                message += "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:"
                
                await event.edit(message, buttons=buttons)
            
            elif event.data == b"autoclean_enable":
                bot.set_config_in_db("autoclean_enabled", "True")
                bot.autocleaner.enabled = True
                await event.answer("‚úÖ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
                buttons = [
                    [Button.inline("‚úÖ –í–∫–ª—é—á–∏—Ç—å", b"autoclean_enable"),
                     Button.inline("‚òëÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å", b"autoclean_disable")],
                    [Button.inline("‚è± –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", b"autoclean_time")],
                    [Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_main")]
                ]
                
                message = "üßπ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏**\n\n"
                message += "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –í–ö–õ\n"
                message += f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {autoclean_delay} —Å–µ–∫—É–Ω–¥\n\n"
                message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                
                await event.edit(message, buttons=buttons)
            
            elif event.data == b"autoclean_disable":
                bot.set_config_in_db("autoclean_enabled", "False")
                bot.autocleaner.enabled = False
                await event.answer("‚úÖ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞!")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
                buttons = [
                    [Button.inline("‚òëÔ∏è –í–∫–ª—é—á–∏—Ç—å", b"autoclean_enable"),
                     Button.inline("‚úÖ –í—ã–∫–ª—é—á–∏—Ç—å", b"autoclean_disable")],
                    [Button.inline("‚è± –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", b"autoclean_time")],
                    [Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_main")]
                ]
                
                message = "üßπ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏**\n\n"
                message += "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –í–´–ö–õ\n"
                message += f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {autoclean_delay} —Å–µ–∫—É–Ω–¥\n\n"
                message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                
                await event.edit(message, buttons=buttons)
            
            elif event.data == b"autoclean_time":
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
                await event.delete()
                async with bot.client.conversation(event.chat_id) as conv:
                    await conv.send_message("‚è± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")
                    response = await conv.get_response()
                    
                    try:
                        new_time = int(response.text.strip())
                        if new_time < 10:
                            await conv.send_message("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥!")
                        else:
                            bot.set_config_in_db("autoclean_delay", str(new_time))
                            bot.autocleaner.delay = new_time
                            await conv.send_message(f"‚úÖ –í—Ä–µ–º—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_time} —Å–µ–∫—É–Ω–¥!")
                    except ValueError:
                        await conv.send_message("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
            
            elif event.data == b"autostart_enable":
                # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
                bashrc_path = os.path.expanduser("~/.bashrc")
                if not os.path.exists(bashrc_path):
                    with open(bashrc_path, "w") as f:
                        f.write(f"cd {os.getcwd()} && python main.py\n")
                else:
                    with open(bashrc_path, "a") as f:
                        f.write(f"\ncd {os.getcwd()} && python main.py\n")
                
                await event.answer("‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω!")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
                buttons = [
                    [Button.inline("‚úÖ –í–∫–ª—é—á–∏—Ç—å", b"autostart_enable"),
                     Button.inline("‚òëÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å", b"autostart_disable")],
                    [Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_main")]
                ]
                
                message = "üöÄ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞**\n\n"
                message += "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –í–ö–õ\n\n"
                message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                
                await event.edit(message, buttons=buttons)
            
            elif event.data == b"autostart_disable":
                # –í—ã–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
                bashrc_path = os.path.expanduser("~/.bashrc")
                if os.path.exists(bashrc_path):
                    with open(bashrc_path, "r") as f:
                        lines = f.readlines()
                    
                    with open(bashrc_path, "w") as f:
                        for line in lines:
                            if "python main.py" not in line and "cd " not in line:
                                f.write(line)
                
                await event.answer("‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω!")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
                buttons = [
                    [Button.inline("‚òëÔ∏è –í–∫–ª—é—á–∏—Ç—å", b"autostart_enable"),
                     Button.inline("‚úÖ –í—ã–∫–ª—é—á–∏—Ç—å", b"autostart_disable")],
                    [Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_main")]
                ]
                
                message = "üöÄ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞**\n\n"
                message += "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –í–´–ö–õ\n\n"
                message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                
                await event.edit(message, buttons=buttons)
            
            elif event.data == b"change_prefix":
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                await event.delete()
                async with bot.client.conversation(event.chat_id) as conv:
                    await conv.send_message("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥:")
                    response = await conv.get_response()
                    
                    new_prefix = response.text.strip()
                    if len(new_prefix) == 0:
                        await conv.send_message("‚ùå –ü—Ä–µ—Ñ–∏–∫—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                    else:
                        bot.set_config_in_db("command_prefix", new_prefix)
                        bot.command_prefix = new_prefix
                        await conv.send_message(f"‚úÖ –ü—Ä–µ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ `{new_prefix}`!")
        except Exception as e:
            await event.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
