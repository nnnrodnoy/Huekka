import os
import sys
import time
import asyncio
import logging
import json
import re
from pathlib import Path
from telethon import events
from config import BotConfig

logger = logging.getLogger("UserBot.System")

class SystemModule:
    def __init__(self, bot):
        self.bot = bot
        self.bot.start_time = time.time()
        
        # ID —ç–º–æ–¥–∑–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.restart_emoji_id = BotConfig.EMOJI_IDS["restart"]
        self.clock_emoji_id = BotConfig.EMOJI_IDS["clock"]
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
        self.restart_file = Path("cash") / "restart_info.json"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        if self.restart_file.exists():
            try:
                with open(self.restart_file, "r") as f:
                    restart_data = json.load(f)
                
                asyncio.create_task(self.send_restart_complete(restart_data))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ restart_info: {str(e)}")
            finally:
                try:
                    self.restart_file.unlink()
                except:
                    pass

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        @bot.client.on(events.NewMessage(outgoing=True, pattern=rf'^{re.escape(bot.command_prefix)}restart\b'))
        async def restart_handler(event):
            await self.cmd_restart(event)
            
        @bot.client.on(events.NewMessage(outgoing=True, pattern=rf'^{re.escape(bot.command_prefix)}reboot\b'))
        async def reboot_handler(event):
            await self.cmd_restart(event)
            
        @bot.client.on(events.NewMessage(outgoing=True, pattern=rf'^{re.escape(bot.command_prefix)}online\b'))
        async def online_handler(event):
            await self.cmd_online(event)
            
        @bot.client.on(events.NewMessage(outgoing=True, pattern=rf'^{re.escape(bot.command_prefix)}uptime\b'))
        async def uptime_handler(event):
            await self.cmd_online(event)
    
    async def send_restart_complete(self, restart_data):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            # –ñ–¥–µ–º –ø–æ–∫–∞ –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
            await asyncio.sleep(3)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if restart_data["is_premium"]:
                text = f"[‚öôÔ∏è](emoji/{self.restart_emoji_id}) **Huekka —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!**"
            else:
                text = "‚öôÔ∏è **Huekka —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!**"
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await self.bot.client.edit_message(
                entity=restart_data["chat_id"],
                message=restart_data["message_id"],
                text=text
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É
            await self.add_to_autoclean(msg)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è restart complete: {str(e)}")

    async def add_to_autoclean(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É"""
        try:
            if hasattr(self.bot, 'autocleaner') and self.bot.autocleaner.enabled:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∏—Ç–µ–ª—å
                await self.bot.autocleaner.schedule_cleanup(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É: {str(e)}")

    async def is_premium_user(self, event):
        try:
            user = await event.get_sender()
            return user.premium if hasattr(user, 'premium') else False
        except Exception:
            return False

    async def format_time(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        days, remainder = divmod(seconds, 86400)
        hours, remainder = divmod(remainder, 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{int(days)}–¥ {int(hours)}—á {int(minutes)}–º–∏–Ω {int(seconds)}—Å–µ–∫"

    async def cmd_restart(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .restart"""
        is_premium = await self.is_premium_user(event)
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            restart_data = {
                "chat_id": event.chat_id,
                "message_id": event.id,
                "is_premium": is_premium
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ cash
            with open(self.restart_file, "w") as f:
                json.dump(restart_data, f)
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            if is_premium:
                msg = await event.edit(f"[‚öôÔ∏è](emoji/{self.restart_emoji_id}) **–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ Huekka...**")
            else:
                msg = await event.edit("‚öôÔ∏è **–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ Huekka...**")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É
            await self.add_to_autoclean(msg)
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            await asyncio.sleep(1)
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
            os.execl(sys.executable, sys.executable, "main.py")
            
        except Exception as e:
            error_msg = await event.edit(f"üö´ **–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:** `{str(e)}`")
            await self.add_to_autoclean(error_msg)
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                if self.restart_file.exists():
                    self.restart_file.unlink()
            except:
                pass

    async def cmd_online(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .online"""
        is_premium = await self.is_premium_user(event)
        uptime = await self.format_time(time.time() - self.bot.start_time)
        
        if is_premium:
            msg = await event.edit(f"[üïí](emoji/{self.clock_emoji_id}) **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** `{uptime}`")
        else:
            msg = await event.edit(f"üïí **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** `{uptime}`")
        
        await self.add_to_autoclean(msg)