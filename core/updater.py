# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoyiiiii
# This file is part of Hueka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import os
import sys
import shutil
import tempfile
import subprocess
import asyncio
import json
import time
import hashlib
import logging
import requests
import zipfile
from pathlib import Path
from config import BotConfig

logger = logging.getLogger("UserBot.Updater")

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
class UpdateColors:
    GREEN_BOLD = '\033[1;92m'  # –ñ–∏—Ä–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'

class GitHubUpdater:
    def __init__(self, bot=None):
        self.bot = bot
        self.repo_url = BotConfig.UPDATER["repo_url"]
        self.update_files = BotConfig.UPDATER["system_files"]
        self.update_dirs = ['asset', 'arts', 'core']
        self.last_update_file = Path("data") / "last_update.txt"
        self.last_update_file.parent.mkdir(exist_ok=True)
        
        # –ü–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        self.ignore_dirs = {'session', 'logs', 'data', 'modules'}
        self.ignore_files = {'config.db'}
    
    def _print_update_status(self, message):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        print(f"{UpdateColors.GREEN_BOLD}[Huekka Update]{UpdateColors.ENDC} {message}")
    
    def _get_file_hash(self, file_path):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö—ç—à —Ñ–∞–π–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not file_path.exists():
            return None
        
        hasher = hashlib.sha256()
        with open(file_path, 'rb') as f:
            while True:
                data = f.read(65536)  # 64kb chunks
                if not data:
                    break
                hasher.update(data)
        return hasher.hexdigest()
    
    def _should_ignore(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É"""
        path_str = str(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞–ø–∫–∏
        for ignore_dir in self.ignore_dirs:
            if ignore_dir in path_str.split(os.sep):
                return True
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã
        if file_path.name in self.ignore_files:
            return True
            
        return False
    
    async def get_latest_commit_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            result = subprocess.run([
                'git', 'ls-remote', '--heads', self.repo_url
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
                lines = result.stdout.strip().split('\n')
                if lines and lines[0]:
                    latest_commit_hash = lines[0].split()[0]
                    return latest_commit_hash
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–º–∏—Ç–µ: {str(e)}")
        
        return None
    
    async def get_local_last_update(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.last_update_file.exists():
            try:
                with open(self.last_update_file, 'r') as f:
                    content = f.read().strip()
                    if content:
                        return content
            except:
                pass
        return ""
    
    async def set_local_last_update(self, commit_hash):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ö—ç—à –∫–æ–º–º–∏—Ç–∞ –∫–∞–∫ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            with open(self.last_update_file, 'w') as f:
                f.write(commit_hash)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            return False
    
    async def check_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
            latest_commit = await self.get_latest_commit_info()
            if not latest_commit:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            local_commit = await self.get_local_last_update()
            
            # –ï—Å–ª–∏ –∫–æ–º–º–∏—Ç—ã —Ä–∞–∑–Ω—ã–µ, –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            return latest_commit != local_commit
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
            return False
    
    async def get_repo_file_list(self, extracted_dir):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
        repo_files = set()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ update_files
        for file in self.update_files:
            repo_file = extracted_dir / file
            if repo_file.exists():
                repo_files.add(str(file))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ update_dirs
        for dir_name in self.update_dirs:
            repo_dir = extracted_dir / dir_name
            if repo_dir.exists():
                for root, _, files in os.walk(repo_dir):
                    for file in files:
                        repo_file_path = Path(root) / file
                        relative_path = str(repo_file_path.relative_to(extracted_dir))
                        repo_files.add(relative_path)
        
        return repo_files
    
    async def remove_deleted_files(self, extracted_dir, repo_files):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –∫—Ä–æ–º–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö"""
        removed_count = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ update_files
        for file in self.update_files:
            local_file = Path(file)
            repo_file = extracted_dir / file
            
            if local_file.exists() and not repo_file.exists() and not self._should_ignore(local_file):
                local_file.unlink()
                self._print_update_status(f"Removed: {file}")
                removed_count += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ update_dirs
        for dir_name in self.update_dirs:
            local_dir = Path(dir_name)
            repo_dir = extracted_dir / dir_name
            
            if local_dir.exists():
                for root, _, files in os.walk(local_dir):
                    for file in files:
                        local_file_path = Path(root) / file
                        relative_path = str(local_file_path.relative_to(local_dir.parent))
                        
                        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö
                        if (relative_path not in repo_files and 
                            not self._should_ignore(local_file_path)):
                            local_file_path.unlink()
                            self._print_update_status(f"Removed: {relative_path}")
                            removed_count += 1
        
        return removed_count
    
    async def perform_update(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        temp_dir = tempfile.mkdtemp(prefix="huekka_update_")
        updated_files = 0
        removed_files = 0
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            latest_commit = await self.get_latest_commit_info()
            if not latest_commit:
                return False
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤ —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
            zip_url = f"{self.repo_url}/archive/refs/heads/main.zip"
            zip_path = Path(temp_dir) / "huekka.zip"
            
            response = requests.get(zip_url, timeout=60)
            if response.status_code != 200:
                return False
            
            with open(zip_path, 'wb') as f:
                f.write(response.content)
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(temp_dir)
            
            extracted_dir = Path(temp_dir) / "Huekka-main"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            repo_files = await self.get_repo_file_list(extracted_dir)
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (–∫—Ä–æ–º–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö)
            removed_files = await self.remove_deleted_files(extracted_dir, repo_files)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö
            for file in self.update_files:
                repo_file = extracted_dir / file
                local_file = Path(file)
                
                if repo_file.exists() and not self._should_ignore(local_file):
                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    local_file.parent.mkdir(parents=True, exist_ok=True)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª
                    repo_hash = self._get_file_hash(repo_file)
                    local_hash = self._get_file_hash(local_file)
                    
                    if repo_hash != local_hash:
                        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                        shutil.copy2(repo_file, local_file)
                        self._print_update_status(f"Updated: {file}")
                        updated_files += 1
                    else:
                        logger.info(f"File unchanged: {file}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–ø–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
            for dir_name in self.update_dirs:
                repo_dir = extracted_dir / dir_name
                local_dir = Path(dir_name)
                
                if repo_dir.exists():
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    for root, _, files in os.walk(repo_dir):
                        for file in files:
                            repo_file_path = Path(root) / file
                            relative_path = repo_file_path.relative_to(repo_dir)
                            local_file_path = local_dir / relative_path
                            
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã
                            if self._should_ignore(local_file_path):
                                continue
                                
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª
                            repo_hash = self._get_file_hash(repo_file_path)
                            local_hash = self._get_file_hash(local_file_path)
                            
                            if repo_hash != local_hash:
                                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                                local_file_path.parent.mkdir(parents=True, exist_ok=True)
                                
                                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                                shutil.copy2(repo_file_path, local_file_path)
                                self._print_update_status(f"Updated: {local_file_path}")
                                updated_files += 1
                            else:
                                logger.info(f"File unchanged: {local_file_path}")
            
            if updated_files > 0 or removed_files > 0:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—ç—à –∫–æ–º–º–∏—Ç–∞ –∫–∞–∫ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                await self.set_local_last_update(latest_commit)
                self._print_update_status(f"Updated {updated_files} files, removed {removed_files} files")
                return True
            else:
                self._print_update_status("No files need updating")
                return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            return False
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            shutil.rmtree(temp_dir, ignore_errors=True)
    
    async def auto_update(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            self._print_update_status("Checking for updates...")
            has_update = await self.check_for_updates()
            
            if has_update:
                self._print_update_status("Updates found, installing...")
                success = await self.perform_update()
                
                if success:
                    self._print_update_status("Update successfully installed")
                    return True
                else:
                    self._print_update_status("Error installing update")
            else:
                self._print_update_status("No updates available")
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            return False

# –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py
async def check_and_update():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    updater = GitHubUpdater()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        needs_restart = await updater.auto_update()
        return needs_restart
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
        return False

# –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª–µ –±–æ—Ç–∞
async def setup(bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    updater = GitHubUpdater(bot)
    
    @bot.register_command("update", update_handler, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "Updater")
    @bot.register_command("upcheck", upcheck_handler, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "Updater")
    
    async def update_handler(event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã update"""
        try:
            has_update = await updater.check_for_updates()
            
            if has_update:
                await event.edit("‚ÄºÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `.upgrade` –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            else:
                await event.edit("‚úÖ –£ –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞")
        except Exception as e:
            await event.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
    
    async def upcheck_handler(event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã upcheck (–∞–ª–∏–∞—Å –¥–ª—è update)"""
        await update_handler(event)
    
    @bot.register_command("upgrade", upgrade_handler, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "Updater")
    async def upgrade_handler(event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã upgrade"""
        try:
            msg = await event.edit("üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            
            success = await updater.perform_update()
            
            if success:
                await msg.edit("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                bot.add_post_restart_action(lambda: None)
                await asyncio.sleep(2)
                await bot.restart()
            else:
                await msg.edit("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                
        except Exception as e:
            await event.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
