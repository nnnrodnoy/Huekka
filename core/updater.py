# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import os
import sys
import shutil
import tempfile
import subprocess
import asyncio
import json
import time
from pathlib import Path
from config import BotConfig

logger = logging.getLogger("UserBot.Updater")

class GitHubUpdater:
    def __init__(self, bot):
        self.bot = bot
        self.repo_url = BotConfig.UPDATER["repo_url"]
        self.update_files = BotConfig.UPDATER["system_files"]
        self.update_dirs = ['asset', 'arts', 'core']
        self.last_update_file = Path("data") / "last_update.txt"
        self.last_update_file.parent.mkdir(exist_ok=True)
    
    async def get_latest_commit_date(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            result = subprocess.run([
                'curl', '-s', 
                f'https://api.github.com/repos/nnnrodnoy/Huekka/commits?per_page=1'
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                commits = json.loads(result.stdout)
                if commits and len(commits) > 0:
                    return commits[0]['commit']['committer']['date']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –∫–æ–º–º–∏—Ç–∞: {str(e)}")
        
        return None
    
    async def get_local_last_update(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.last_update_file.exists():
            try:
                with open(self.last_update_file, 'r') as f:
                    return float(f.read().strip())
            except:
                pass
        return 0
    
    async def set_local_last_update(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            with open(self.last_update_file, 'w') as f:
                f.write(str(time.time()))
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            return False
    
    async def check_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
            commit_date_str = await self.get_latest_commit_date()
            if not commit_date_str:
                return False
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ timestamp
            from datetime import datetime
            commit_date = datetime.strptime(commit_date_str, '%Y-%m-%dT%H:%M:%SZ')
            commit_timestamp = commit_date.timestamp()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            local_timestamp = await self.get_local_last_update()
            
            # –ï—Å–ª–∏ –∫–æ–º–º–∏—Ç –Ω–æ–≤–µ–µ –Ω–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            return commit_timestamp > local_timestamp
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
            return False
    
    async def perform_update(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        temp_dir = tempfile.mkdtemp(prefix="huekka_update_")
        
        try:
            # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            result = subprocess.run([
                'git', 'clone', '--depth', '1', self.repo_url, temp_dir
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode != 0:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {result.stderr}")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            for file in self.update_files:
                repo_file = Path(temp_dir) / file
                local_file = Path(file)
                
                if repo_file.exists():
                    if local_file.exists():
                        local_file.unlink()
                    shutil.copy2(repo_file, local_file)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–ø–∫–∏
            for dir_name in self.update_dirs:
                repo_dir = Path(temp_dir) / dir_name
                local_dir = Path(dir_name)
                
                if repo_dir.exists():
                    if local_dir.exists():
                        shutil.rmtree(local_dir)
                    shutil.copytree(repo_dir, local_dir)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await self.set_local_last_update()
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            return False
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            shutil.rmtree(temp_dir, ignore_errors=True)
    
    async def auto_update(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            has_update = await self.check_for_updates()
            
            if has_update:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É...")
                success = await self.perform_update()
                
                if success:
                    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    return True
                else:
                    logger.error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            return False

# –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py
async def check_and_update():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    updater = GitHubUpdater(None)  # None —Ç.–∫. –±–æ—Ç –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        needs_restart = await updater.auto_update()
        return needs_restart
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
        return False

# –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª–µ –±–æ—Ç–∞
async def setup(bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    updater = GitHubUpdater(bot)
    
    @bot.register_command("update", update_handler, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "Updater")
    @bot.register_command("upcheck", upcheck_handler, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "Updater")
    
    async def update_handler(event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã update"""
        try:
            has_update = await updater.check_for_updates()
            
            if has_update:
                await event.edit("‚ÄºÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `.upgrade` –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            else:
                await event.edit("‚úÖ –£ –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞")
        except Exception as e:
            await event.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
    
    async def upcheck_handler(event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã upcheck (–∞–ª–∏–∞—Å –¥–ª—è update)"""
        await update_handler(event)
    
    @bot.register_command("upgrade", upgrade_handler, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "Updater")
    async def upgrade_handler(event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã upgrade"""
        try:
            msg = await event.edit("üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            
            success = await updater.perform_update()
            
            if success:
                await msg.edit("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                bot.add_post_restart_action(lambda: None)
                await asyncio.sleep(2)
                await bot.restart()
            else:
                await msg.edit("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                
        except Exception as e:
            await event.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
