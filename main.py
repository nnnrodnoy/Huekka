# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import os
import sys
import re
import asyncio
import base64
import time
import hashlib
import json
import secrets
import shutil
import tempfile
import subprocess
from pathlib import Path
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes
from telethon.sessions import StringSession
from telethon import TelegramClient
from telethon.errors import (
    SessionPasswordNeededError,
    ApiIdInvalidError,
    PhoneNumberInvalidError,
    FloodWaitError,
    PhoneCodeInvalidError
)

class Colors:
    DARK_VIOLET = '\033[38;5;54m'
    LIGHT_BLUE = '\033[38;5;117m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    GREEN = '\033[92m'
    CYAN = '\033[96m'
    MAGENTA = '\033[95m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

class Updater:
    def __init__(self):
        self.repo_url = "https://github.com/stepka5/Huekka"
        self.update_files = ['main.py', 'userbot.py', 'installer.sh', 'start_bot.sh', 'requirements.txt']
        self.update_dirs = ['core']
    
    def run_command(self, cmd, cwd=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True, cwd=cwd)
            return result.returncode == 0, result.stdout, result.stderr
        except Exception as e:
            return False, "", str(e)

    def check_update(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = tempfile.mkdtemp(prefix="huekka_update_")
        
        try:
            # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            success, stdout, stderr = self.run_command(f"git clone {self.repo_url} {temp_dir} --depth=1")
            if not success:
                shutil.rmtree(temp_dir, ignore_errors=True)
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –∏ –ø–∞–ø–∫–∞—Ö
            has_changes = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
            for file in self.update_files:
                repo_file = os.path.join(temp_dir, file)
                local_file = file
                
                if os.path.exists(repo_file):
                    if not os.path.exists(local_file):
                        has_changes = True
                        break
                    
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
                    with open(repo_file, 'rb') as f1, open(local_file, 'rb') as f2:
                        if f1.read() != f2.read():
                            has_changes = True
                            break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏
            if not has_changes:
                for dir_name in self.update_dirs:
                    repo_dir = os.path.join(temp_dir, dir_name)
                    local_dir = dir_name
                    
                    if os.path.exists(repo_dir):
                        if not os.path.exists(local_dir):
                            has_changes = True
                            break
                        
                        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
                        for root, dirs, files in os.walk(repo_dir):
                            for file in files:
                                rel_path = os.path.relpath(os.path.join(root, file), repo_dir)
                                repo_file_path = os.path.join(root, file)
                                local_file_path = os.path.join(local_dir, rel_path)
                                
                                if not os.path.exists(local_file_path):
                                    has_changes = True
                                    break
                                
                                with open(repo_file_path, 'rb') as f1, open(local_file_path, 'rb') as f2:
                                    if f1.read() != f2.read():
                                        has_changes = True
                                        break
                            
                            if has_changes:
                                break
                    
                    if has_changes:
                        break
            
            shutil.rmtree(temp_dir, ignore_errors=True)
            return has_changes
            
        except Exception as e:
            shutil.rmtree(temp_dir, ignore_errors=True)
            return False

    def perform_update(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = tempfile.mkdtemp(prefix="huekka_update_")
        
        try:
            # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            success, stdout, stderr = self.run_command(f"git clone {self.repo_url} {temp_dir} --depth=1")
            if not success:
                shutil.rmtree(temp_dir, ignore_errors=True)
                return False
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
            for file in self.update_files:
                if os.path.exists(file):
                    os.remove(file)
            
            for dir_name in self.update_dirs:
                if os.path.exists(dir_name):
                    shutil.rmtree(dir_name)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
            for file in self.update_files:
                repo_file = os.path.join(temp_dir, file)
                if os.path.exists(repo_file):
                    shutil.copy2(repo_file, file)
            
            for dir_name in self.update_dirs:
                repo_dir = os.path.join(temp_dir, dir_name)
                if os.path.exists(repo_dir):
                    shutil.copytree(repo_dir, dir_name)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            shutil.rmtree(temp_dir, ignore_errors=True)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å
            if os.path.exists("Huekka"):
                shutil.rmtree("Huekka", ignore_errors=True)
            if os.path.exists(".git"):
                shutil.rmtree(".git", ignore_errors=True)
            
            return True
            
        except Exception as e:
            shutil.rmtree(temp_dir, ignore_errors=True)
            return False

class SessionManager:
    @staticmethod
    def generate_encryption_key():
        return secrets.token_urlsafe(32)

    @staticmethod
    def encrypt_data(data: dict, key: str) -> str:
        salt = get_random_bytes(16)
        derived_key = hashlib.pbkdf2_hmac('sha256', key.encode(), salt, 100000, 32)
        
        iv = get_random_bytes(16)
        cipher = AES.new(derived_key, AES.MODE_CBC, iv)
        encrypted = cipher.encrypt(pad(json.dumps(data).encode(), AES.block_size))
        
        return base64.b64encode(salt + iv + encrypted).decode()

def print_mishka_art():
    """–í—ã–≤–æ–¥–∏—Ç ASCII –∞—Ä—Ç –º–∏—à–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ü–≤–µ—Ç–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤"""
    art_path = Path("data") / "mishka.txt"
    
    if not art_path.exists():
        return False
        
    try:
        # –°–∏–º–≤–æ–ª—ã —Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
        BACKGROUND_CHARS = {
            '‚à©', '‚îî', '\xa0',  
            '‚ïñ', '¬µ', '‚å°', '‚ï¢', '√ú', '‚åê', '¬¨', '‚îÇ',
            '‚ñÑ', '‚ñÄ', '‚ñå', '‚ñê', '‚ñÄ', '‚ñÑ', '‚ñÄ'
        }
        
        def convert_color(match):
            hex_color = match.group(1).lower()
            text = match.group(2)
            
            # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Ñ–æ–Ω–∞ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
            for char in BACKGROUND_CHARS:
                text = text.replace(char, ' ')
            return f"\033[38;2;{int(hex_color[0:2], 16)};{int(hex_color[2:4], 16)};{int(hex_color[4:6], 16)}m{text}"
        
        with open(art_path, 'r', encoding='utf-8') as f:
            for line in f:
                # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
                stripped_line = line.rstrip('\n')
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏, –∫—Ä–æ–º–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö
                stripped_line = re.sub(r'\[(?!color)[^]]*\]', '', stripped_line)
                stripped_line = re.sub(r'\[/color\]', '', stripped_line)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
                stripped_line = re.sub(
                    r'\[color=#([0-9a-f]{6})\](.*?)(?=\[color=|$)',
                    convert_color,
                    stripped_line,
                    flags=re.IGNORECASE
                )
                
                # –ó–∞–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã —Ñ–æ–Ω–∞
                for char in BACKGROUND_CHARS:
                    stripped_line = stripped_line.replace(char, ' ')
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –∞—Ä—Ç–∞
                print(stripped_line + "\033[0m")
        return True
    except:
        return False

def clear_screen():
    """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞"""
    os.system('cls' if os.name == 'nt' else 'clear')

def show_welcome():
    """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    clear_screen()
    print_mishka_art()
    print(f"{Colors.DARK_VIOLET}{Colors.BOLD}Huekka is started!{Colors.ENDC}")

async def setup_session():
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É session, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("session", exist_ok=True)
    
    show_welcome()

    print(f"{Colors.LIGHT_BLUE} 1. Go to {Colors.BOLD}https://my.telegram.org/apps{Colors.ENDC}{Colors.LIGHT_BLUE} and login.{Colors.ENDC}")
    print(f"{Colors.LIGHT_BLUE} 2. Click to {Colors.BOLD}API Development tools{Colors.ENDC}{Colors.LIGHT_BLUE}{Colors.ENDC}")
    print(f"{Colors.LIGHT_BLUE} 3. Create new application by entering the required details{Colors.ENDC}")
    print(f"{Colors.LIGHT_BLUE} 4. Copy {Colors.BOLD}API ID{Colors.ENDC}{Colors.LIGHT_BLUE} and {Colors.BOLD}API HASH{Colors.ENDC}{Colors.LIGHT_BLUE}\n{Colors.ENDC}")

    while True:
        api_id = input(f"{Colors.DARK_VIOLET}Enter API ID: {Colors.ENDC}").strip()
        if not api_id.isdigit() or len(api_id) < 5 or len(api_id) > 10:
            print(f"{Colors.RED}Invalid API ID! Must be 5-10 digit number{Colors.ENDC}")
            continue

        api_hash = input(f"{Colors.DARK_VIOLET}Enter API HASH: {Colors.ENDC}").strip()
        if not re.match(r'^[a-f0-9]{32}$', api_hash):
            print(f"{Colors.RED}Invalid API HASH! Must be 32-character hex string{Colors.ENDC}")
            continue

        phone = input(f"{Colors.DARK_VIOLET}Enter phone number: {Colors.ENDC}").strip()
        phone_clean = ''.join(filter(str.isdigit, phone))
        if len(phone_clean) < 10:
            print(f"{Colors.RED}Invalid phone number format!{Colors.ENDC}")
            continue

        break

    client = TelegramClient(StringSession(), int(api_id), api_hash)
    await client.connect()

    try:
        await client.send_code_request(phone_clean)
        print(f"\n{Colors.GREEN}Verification code sent to {phone_clean}{Colors.ENDC}")
    except FloodWaitError as e:
        print(f"\n{Colors.YELLOW}Flood limit exceeded. Wait {e.seconds} seconds{Colors.ENDC}")
        return
    except Exception as e:
        print(f"\n{Colors.RED}Error sending code: {str(e)}{Colors.ENDC}")
        return

    code_attempts = 0
    while code_attempts < 3:
        code = input(f"{Colors.DARK_VIOLET}Enter SMS code: {Colors.ENDC}").replace('-', '')

        try:
            await client.sign_in(phone_clean, code=code)
            break
        except SessionPasswordNeededError:
            password = input(f"{Colors.DARK_VIOLET}Enter 2FA password: {Colors.ENDC}")
            try:
                await client.sign_in(password=password)
                break
            except Exception as e:
                print(f"{Colors.RED}Auth error: {str(e)}{Colors.ENDC}")
                code_attempts = 3
        except PhoneCodeInvalidError:
            print(f"{Colors.RED}Invalid code. Try again{Colors.ENDC}")
            code_attempts += 1
        except Exception as e:
            print(f"{Colors.RED}Auth error: {str(e)}{Colors.ENDC}")
            code_attempts += 1

    if code_attempts >= 3:
        print(f"{Colors.RED}Too many failed attempts{Colors.ENDC}")
        return

    session_str = client.session.save()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    encryption_key = SessionManager.generate_encryption_key()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ .env –≤ –ø–∞–ø–∫–µ session
    with open(Path("session") / ".env", 'w') as f:
        f.write(f"ENCRYPTION_KEY={encryption_key}\n")
    
    # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    session_data = {
        'api_id': int(api_id),
        'api_hash': api_hash,
        'session_string': session_str
    }
    
    encrypted_session = SessionManager.encrypt_data(session_data, encryption_key)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –ø–∞–ø–∫–µ session
    with open(Path("session") / "Huekka.session", 'w') as f:
        f.write(encrypted_session)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    show_welcome()
    os.execl(sys.executable, sys.executable, "userbot.py")

async def check_and_update():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
    updater = Updater()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    has_update = updater.check_update()
    
    if has_update:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        success = updater.perform_update()
        
        if success:
            print(f"{Colors.GREEN} Update installed! Restarting...{Colors.ENDC}")
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            os.execl(sys.executable, sys.executable, "main.py")
        else:
            print(f"{Colors.RED}‚ùå Update failed!{Colors.ENDC}")
    
    # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫

if __name__ == "__main__":
    session_path = Path("session") / "Huekka.session"
    env_path = Path("session") / ".env"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏
    session_exists = session_path.exists()
    env_exists = env_path.exists()
    
    if not session_exists or not env_exists:
        show_welcome()
        
        if session_exists and not env_exists:
            print(f"{Colors.YELLOW}‚ö†Ô∏è Found session file but no encryption key!{Colors.ENDC}")
            print(f"{Colors.YELLOW}This might cause issues. Do you want to:{Colors.ENDC}")
            print(f"{Colors.LIGHT_BLUE}1. Create new session (recommended){Colors.ENDC}")
            print(f"{Colors.LIGHT_BLUE}2. Try to continue anyway{Colors.ENDC}")
            
            choice = input(f"{Colors.DARK_VIOLET}Enter your choice (1/2): {Colors.ENDC}").strip()
            if choice == "1":
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                session_path.unlink()
                asyncio.run(setup_session())
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
                print(f"{Colors.YELLOW}‚ö†Ô∏è Continuing without encryption key...{Colors.ENDC}")
                time.sleep(1)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                asyncio.run(check_and_update())
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                show_welcome()
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
                os.execl(sys.executable, sys.executable, "userbot.py")
        else:
            asyncio.run(setup_session())
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        asyncio.run(check_and_update())
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        show_welcome()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        os.execl(sys.executable, sys.executable, "userbot.py")
