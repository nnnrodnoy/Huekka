# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import os
import logging
import asyncio
import random
import math
from pathlib import Path
from telethon import events
from telethon.errors import FloodWaitError, MessageNotModifiedError
from config import BotConfig
from core.formatters import text, msg

logger = logging.getLogger("UserBot.Love")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
COLORS = ["üü•", "üüß", "üü®", "üü©", "üü¶", "üü™"]
HEART_COLORS = ["‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]
EMPTY = "‚¨õÔ∏è"
MAIN_COLOR = "üü•"
MAIN_HEART = "‚ù§Ô∏è"

def get_module_info():
    return {
        "name": "Love",
        "description": "–ê–Ω–∏–º–∞—Ü–∏–∏ —Å–µ—Ä–¥—Ü–∞ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª—é–±–≤–∏",
        "developer": "@BotHuekka",
        "version": "1.0.0",
        "commands": [
            {
                "command": "love1",
                "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Å–µ—Ä–¥—Ü–∞"
            },
            {
                "command": "love2",
                "description": "–°–ø–∏—Ä–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Å–µ—Ä–¥—Ü–∞"
            },
            {
                "command": "love3",
                "description": "–ê–Ω–∏–º–∞—Ü–∏—è —Å–µ—Ä–¥—Ü–∞ –∏–∑ —Å–µ—Ä–¥–µ—á–µ–∫"
            },
            {
                "command": "love4",
                "description": "–°–ø–∏—Ä–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Å–µ—Ä–¥—Ü–∞ –∏–∑ —Å–µ—Ä–¥–µ—á–µ–∫"
            }
        ]
    }

MODULE_INFO = get_module_info()

class LoveModule:
    def __init__(self, bot):
        self.bot = bot
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ MODULE_INFO
        for cmd_info in MODULE_INFO["commands"]:
            cmd = cmd_info["command"]
            handler = getattr(self, f"cmd_{cmd}")
            bot.register_command(
                cmd=cmd,
                handler=handler,
                description=cmd_info["description"],
                module_name=MODULE_INFO["name"]
            )
        
        bot.set_module_description(MODULE_INFO["name"], MODULE_INFO["description"])

    async def is_premium_user(self, event):
        try:
            user = await event.get_sender()
            return user.premium if hasattr(user, 'premium') else False
        except Exception:
            return False

    async def add_to_autoclean(self, message):
        try:
            if hasattr(self.bot, 'autocleaner') and self.bot.autocleaner.enabled:
                await self.bot.autocleaner.schedule_cleanup(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É: {str(e)}")

    async def safe_edit(self, message, new_text, is_html=False):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if is_html:
                await message.edit(new_text, parse_mode='html')
            else:
                await message.edit(new_text)
            return True
        except FloodWaitError as e:
            logger.warning(f"–û–∂–∏–¥–∞–Ω–∏–µ FloodWait: {e.seconds} —Å–µ–∫.")
            await asyncio.sleep(e.seconds + 2)
            return await self.safe_edit(message, new_text, is_html)
        except MessageNotModifiedError:
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
            return False

    async def classic_animation(self, event):
        """–ê–Ω–∏–º–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —Å–µ—Ä–¥—Ü–∞"""
        try:
            # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await event.edit("<b>–Ø –¢–ï–ë–Ø –õ–Æ–ë–õ–Æ!...‚ù§Ô∏è</b>", parse_mode='html')
            await asyncio.sleep(0.7)

            # –≠—Ç–∞–ø—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–µ—Ä–¥—Ü–∞
            heart_stages = [
                [
                    EMPTY * 9,
                    EMPTY * 2 + MAIN_COLOR * 2 + EMPTY + MAIN_COLOR * 2 + EMPTY * 2,
                    EMPTY * 9
                ],
                [
                    EMPTY * 9,
                    EMPTY * 2 + MAIN_COLOR * 2 + EMPTY + MAIN_COLOR * 2 + EMPTY * 2,
                    EMPTY + MAIN_COLOR * 7 + EMPTY,
                    EMPTY + MAIN_COLOR * 7 + EMPTY,
                    EMPTY * 9
                ],
                [
                    EMPTY * 9,
                    EMPTY * 2 + MAIN_COLOR * 2 + EMPTY + MAIN_COLOR * 2 + EMPTY * 2,
                    EMPTY + MAIN_COLOR * 7 + EMPTY,
                    EMPTY + MAIN_COLOR * 7 + EMPTY,
                    EMPTY + MAIN_COLOR * 7 + EMPTY,
                    EMPTY * 2 + MAIN_COLOR * 5 + EMPTY * 2,
                    EMPTY * 9
                ],
                [
                    EMPTY * 9,
                    EMPTY * 2 + MAIN_COLOR * 2 + EMPTY + MAIN_COLOR * 2 + EMPTY * 2,
                    EMPTY + MAIN_COLOR * 7 + EMPTY,
                    EMPTY + MAIN_COLOR * 7 + EMPTY,
                    EMPTY + MAIN_COLOR * 7 + EMPTY,
                    EMPTY * 2 + MAIN_COLOR * 5 + EMPTY * 2,
                    EMPTY * 3 + MAIN_COLOR * 3 + EMPTY * 3,
                    EMPTY * 4 + MAIN_COLOR + EMPTY * 4,
                    EMPTY * 9
                ]
            ]

            # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ—Ä–¥—Ü–∞
            for stage in heart_stages:
                await self.safe_edit(msg, "<pre>" + "\n".join(stage) + "</pre>", True)
                await asyncio.sleep(0.4)

            # –°–º–µ–Ω–∞ —Ü–≤–µ—Ç–æ–≤ —Å–µ—Ä–¥—Ü–∞
            for color in COLORS:
                colored_heart = [
                    EMPTY * 9,
                    EMPTY * 2 + color * 2 + EMPTY + color * 2 + EMPTY * 2,
                    EMPTY + color * 7 + EMPTY,
                    EMPTY + color * 7 + EMPTY,
                    EMPTY + color * 7 + EMPTY,
                    EMPTY * 2 + color * 5 + EMPTY * 2,
                    EMPTY * 3 + color * 3 + EMPTY * 3,
                    EMPTY * 4 + color + EMPTY * 4,
                    EMPTY * 9
                ]
                await self.safe_edit(msg, "<pre>" + "\n".join(colored_heart) + "</pre>", True)
                await asyncio.sleep(0.6)

            # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–µ—Ä–¥—Ü–∞
            for i in range(8, 0, -1):
                heart = (MAIN_COLOR * i + "\n") * i
                await self.safe_edit(msg, f"<pre>{heart}</pre>", True)
                await asyncio.sleep(0.3)

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            final_text = "I LOVE YOU! ‚ù§Ô∏è"
            for i in range(1, len(final_text) + 1):
                await self.safe_edit(msg, f"<b>{final_text[:i]}</b>", True)
                await asyncio.sleep(0.2)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ classic_animation: {str(e)}")
            await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    async def spiral_animation(self, event):
        """–°–ø–∏—Ä–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Å–µ—Ä–¥—Ü–∞"""
        try:
            # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await event.edit("<b>–Ø –¢–ï–ë–Ø –û–ë–û–ñ–ê–Æ!...‚ù§Ô∏è</b>", parse_mode='html')
            await asyncio.sleep(0.7)

            # –ë–∞–∑–æ–≤–æ–µ —Å–µ—Ä–¥—Ü–µ
            base = [
                [EMPTY] * 9,
                [EMPTY] * 2 + ["‚ù§Ô∏è"] * 2 + [EMPTY] + ["‚ù§Ô∏è"] * 2 + [EMPTY] * 2,
                [EMPTY] + ["‚ù§Ô∏è"] * 7 + [EMPTY],
                [EMPTY] + ["‚ù§Ô∏è"] * 7 + [EMPTY],
                [EMPTY] + ["‚ù§Ô∏è"] * 7 + [EMPTY],
                [EMPTY] * 2 + ["‚ù§Ô∏è"] * 5 + [EMPTY] * 2,
                [EMPTY] * 3 + ["‚ù§Ô∏è"] * 3 + [EMPTY] * 3,
                [EMPTY] * 4 + ["‚ù§Ô∏è"] + [EMPTY] * 4,
                [EMPTY] * 9
            ]

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Å–µ—Ä–¥—Ü–∞
            points = []
            for i in range(len(base)):
                for j in range(len(base[i])):
                    if base[i][j] == "‚ù§Ô∏è":
                        points.append((i, j))

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –¥–ª—è —Å–ø–∏—Ä–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            center = (4, 4)
            points.sort(key=lambda p: math.atan2(p[0] - center[0], p[1] - center[1]))

            # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
            current_heart = [[EMPTY for _ in range(9)] for _ in range(9)]
            for i, (x, y) in enumerate(points):
                current_heart[x][y] = random.choice(COLORS)
                if i % 2 == 0:
                    spiral_msg = "<pre>" + "\n".join("".join(line) for line in current_heart) + "</pre>"
                    await self.safe_edit(msg, spiral_msg, True)
                    await asyncio.sleep(0.25)

            # –í—Ä–∞—â–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
            for _ in range(8):
                for x, y in points:
                    current_heart[x][y] = random.choice(COLORS)
                
                rotate_msg = "<pre>" + "\n".join("".join(line) for line in current_heart) + "</pre>"
                await self.safe_edit(msg, rotate_msg, True)
                await asyncio.sleep(0.7)

            # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            num_points = len(points)
            for i in range(num_points):
                index = num_points - 1 - i
                x, y = points[index]
                current_heart[x][y] = EMPTY

                if i % 3 == 0:
                    remove_msg = "<pre>" + "\n".join("".join(line) for line in current_heart) + "</pre>"
                    await self.safe_edit(msg, remove_msg, True)
                    await asyncio.sleep(0.15)

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            text_stages = ["‚ù§Ô∏è", "I‚ù§Ô∏è", "I L‚ù§Ô∏è", "I LO‚ù§Ô∏è", "I LOV‚ù§Ô∏è", "I LOVE‚ù§Ô∏è", 
                          "I LOVE Y‚ù§Ô∏è", "I LOVE YO‚ù§Ô∏è", "I LOVE YOU‚ù§Ô∏è", "I LOVE YOU!‚ù§Ô∏è", "I LOVE YOU! ‚ù§Ô∏è"]
            for text in text_stages:
                await self.safe_edit(msg, f"<b>{text}</b>", True)
                await asyncio.sleep(0.4)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ spiral_animation: {str(e)}")
            await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    async def classic_animation_hearts(self, event):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Å–µ—Ä–¥—Ü–∞ –∏–∑ —Å–µ—Ä–¥–µ—á–µ–∫"""
        try:
            # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await event.edit("<b>–Ø –¢–ï–ë–Ø –õ–Æ–ë–õ–Æ!...‚ù§Ô∏è</b>", parse_mode='html')
            await asyncio.sleep(0.7)

            # –≠—Ç–∞–ø—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–µ—Ä–¥—Ü–∞
            heart_stages = [
                [
                    EMPTY * 9,
                    EMPTY * 2 + MAIN_HEART * 2 + EMPTY + MAIN_HEART * 2 + EMPTY * 2,
                    EMPTY * 9
                ],
                [
                    EMPTY * 9,
                    EMPTY * 2 + MAIN_HEART * 2 + EMPTY + MAIN_HEART * 2 + EMPTY * 2,
                    EMPTY + MAIN_HEART * 7 + EMPTY,
                    EMPTY + MAIN_HEART * 7 + EMPTY,
                    EMPTY * 9
                ],
                [
                    EMPTY * 9,
                    EMPTY * 2 + MAIN_HEART * 2 + EMPTY + MAIN_HEART * 2 + EMPTY * 2,
                    EMPTY + MAIN_HEART * 7 + EMPTY,
                    EMPTY + MAIN_HEART * 7 + EMPTY,
                    EMPTY + MAIN_HEART * 7 + EMPTY,
                    EMPTY * 2 + MAIN_HEART * 5 + EMPTY * 2,
                    EMPTY * 9
                ],
                [
                    EMPTY * 9,
                    EMPTY * 2 + MAIN_HEART * 2 + EMPTY + MAIN_HEART * 2 + EMPTY * 2,
                    EMPTY + MAIN_HEART * 7 + EMPTY,
                    EMPTY + MAIN_HEART * 7 + EMPTY,
                    EMPTY + MAIN_HEART * 7 + EMPTY,
                    EMPTY * 2 + MAIN_HEART * 5 + EMPTY * 2,
                    EMPTY * 3 + MAIN_HEART * 3 + EMPTY * 3,
                    EMPTY * 4 + MAIN_HEART + EMPTY * 4,
                    EMPTY * 9
                ]
            ]

            # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ—Ä–¥—Ü–∞
            for stage in heart_stages:
                await self.safe_edit(msg, "<pre>" + "\n".join(stage) + "</pre>", True)
                await asyncio.sleep(0.4)

            # –°–º–µ–Ω–∞ —Ü–≤–µ—Ç–æ–≤ —Å–µ—Ä–¥–µ—á–µ–∫
            for _ in range(2):
                for color in random.sample(HEART_COLORS, len(HEART_COLORS)):
                    colored_heart = [
                        EMPTY * 9,
                        EMPTY * 2 + color * 2 + EMPTY + color * 2 + EMPTY * 2,
                        EMPTY + color * 7 + EMPTY,
                        EMPTY + color * 7 + EMPTY,
                        EMPTY + color * 7 + EMPTY,
                        EMPTY * 2 + color * 5 + EMPTY * 2,
                        EMPTY * 3 + color * 3 + EMPTY * 3,
                        EMPTY * 4 + color + EMPTY * 4,
                        EMPTY * 9
                    ]
                    await self.safe_edit(msg, "<pre>" + "\n".join(colored_heart) + "</pre>", True)
                    await asyncio.sleep(0.5)

            # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–µ—Ä–¥—Ü–∞
            for i in range(8, 0, -1):
                heart = (MAIN_HEART * i + "\n") * i
                await self.safe_edit(msg, f"<pre>{heart}</pre>", True)
                await asyncio.sleep(0.3)

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            final_text = "I LOVE YOU! ‚ù§Ô∏è"
            for i in range(1, len(final_text) + 1):
                await self.safe_edit(msg, f"<b>{final_text[:i]}</b>", True)
                await asyncio.sleep(0.2)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ classic_animation_hearts: {str(e)}")
            await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    async def spiral_animation_hearts(self, event):
        """–°–ø–∏—Ä–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Å–µ—Ä–¥—Ü–∞ –∏–∑ —Å–µ—Ä–¥–µ—á–µ–∫"""
        try:
            # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await event.edit("<b>–Ø –¢–ï–ë–Ø –û–ë–û–ñ–ê–Æ!...‚ù§Ô∏è</b>", parse_mode='html')
            await asyncio.sleep(0.7)

            # –ë–∞–∑–æ–≤–æ–µ —Å–µ—Ä–¥—Ü–µ
            base = [
                [EMPTY] * 9,
                [EMPTY] * 2 + ["‚ù§Ô∏è"] * 2 + [EMPTY] + ["‚ù§Ô∏è"] * 2 + [EMPTY] * 2,
                [EMPTY] + ["‚ù§Ô∏è"] * 7 + [EMPTY],
                [EMPTY] + ["‚ù§Ô∏è"] * 7 + [EMPTY],
                [EMPTY] + ["‚ù§Ô∏è"] * 7 + [EMPTY],
                [EMPTY] * 2 + ["‚ù§Ô∏è"] * 5 + [EMPTY] * 2,
                [EMPTY] * 3 + ["‚ù§Ô∏è"] * 3 + [EMPTY] * 3,
                [EMPTY] * 4 + ["‚ù§Ô∏è"] + [EMPTY] * 4,
                [EMPTY] * 9
            ]

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Å–µ—Ä–¥—Ü–∞
            points = []
            for i in range(len(base)):
                for j in range(len(base[i])):
                    if base[i][j] == "‚ù§Ô∏è":
                        points.append((i, j))

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –¥–ª—è —Å–ø–∏—Ä–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            center = (4, 4)
            points.sort(key=lambda p: math.atan2(p[0] - center[0], p[1] - center[1]))

            # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
            current_heart = [[EMPTY for _ in range(9)] for _ in range(9)]
            for i, (x, y) in enumerate(points):
                current_heart[x][y] = random.choice(HEART_COLORS)
                if i % 2 == 0:
                    spiral_msg = "<pre>" + "\n".join("".join(line) for line in current_heart) + "</pre>"
                    await self.safe_edit(msg, spiral_msg, True)
                    await asyncio.sleep(0.25)

            # –í—Ä–∞—â–µ–Ω–∏–µ —Å–µ—Ä–¥–µ—á–µ–∫
            for _ in range(8):
                for x, y in points:
                    current_heart[x][y] = random.choice(HEART_COLORS)
                
                rotate_msg = "<pre>" + "\n".join("".join(line) for line in current_heart) + "</pre>"
                await self.safe_edit(msg, rotate_msg, True)
                await asyncio.sleep(0.7)

            # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            num_points = len(points)
            for i in range(num_points):
                index = num_points - 1 - i
                x, y = points[index]
                current_heart[x][y] = EMPTY

                if i % 3 == 0:
                    remove_msg = "<pre>" + "\n".join("".join(line) for line in current_heart) + "</pre>"
                    await self.safe_edit(msg, remove_msg, True)
                    await asyncio.sleep(0.15)

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            text_stages = ["‚ù§Ô∏è", "I‚ù§Ô∏è", "I L‚ù§Ô∏è", "I LO‚ù§Ô∏è", "I LOV‚ù§Ô∏è", "I LOVE‚ù§Ô∏è", 
                          "I LOVE Y‚ù§Ô∏è", "I LOVE YO‚ù§Ô∏è", "I LOVE YOU‚ù§Ô∏è", "I LOVE YOU! ‚ù§Ô∏è"]
            for text in text_stages:
                await self.safe_edit(msg, f"<b>{text}</b>", True)
                await asyncio.sleep(0.4)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ spiral_animation_hearts: {str(e)}")
            await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    async def cmd_love1(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .love1"""
        await self.classic_animation(event)

    async def cmd_love2(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .love2"""
        await self.spiral_animation(event)

    async def cmd_love3(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .love3"""
        await self.classic_animation_hearts(event)

    async def cmd_love4(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .love4"""
        await self.spiral_animation_hearts(event)

def setup(bot):
    LoveModule(bot)