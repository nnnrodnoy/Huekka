# ¬©Ô∏è nnnrodnoy, 2025
# üí¨ @nnnrodnoy
# This file is part of Huekka
# üåê https://github.com/nnnrodnoy/Huekka/
# You can redistribute it and/or modify it under the terms of the MIT License
# üîë https://opensource.org/licenses/MIT
import logging
import time
from datetime import datetime
from telethon import events
from telethon.tl import functions, types
from telethon.errors import FloodWaitError, MessageNotModifiedError
from config import BotConfig
from core.formatters import text, msg

logger = logging.getLogger("UserBot.UserInfo")

def get_module_info():
    return {
        "name": "UserInfo",
        "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, —á–∞—Ç–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö",
        "developer": "BotHuekka",
        "version": "2.1.0",
        "commands": [
            {
                "command": "userinfo",
                "description": "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, —á–∞—Ç–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ"
            }
        ]
    }

MODULE_INFO = get_module_info()

class UserInfoModule:
    def __init__(self, bot):
        self.bot = bot
        
        bot.register_command(
            cmd=MODULE_INFO["commands"][0]["command"],
            handler=self.cmd_userinfo,
            description=MODULE_INFO["commands"][0]["description"],
            module_name=MODULE_INFO["name"]
        )
        
        bot.set_module_description(MODULE_INFO["name"], MODULE_INFO["description"])

    async def add_to_autoclean(self, message):
        try:
            if hasattr(self.bot, 'autocleaner') and self.bot.autocleaner.enabled:
                await self.bot.autocleaner.schedule_cleanup(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É: {str(e)}")

    async def resolve_entity(self, event, entity_ref):
        """Resolve entity from message text or reply"""
        try:
            if entity_ref:
                try:
                    return await self.bot.client.get_input_entity(entity_ref)
                except ValueError:
                    return await self.bot.client.get_input_entity(int(entity_ref))
            elif event.reply_to_msg_id:
                reply_msg = await event.get_reply_message()
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø–æ–ª—É—á–∞–µ–º InputEntity –∏–∑ sender_id
                return await self.bot.client.get_input_entity(reply_msg.sender_id)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ—Ç —Ä–µ–ø–ª–∞—è, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                return await event.get_input_chat()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è entity: {str(e)}")
            return None

    async def get_common_chats_count(self, user_id):
        """Get count of common chats with user"""
        try:
            common_chats = await self.bot.client(functions.messages.GetCommonChatsRequest(
                user_id=await self.bot.client.get_input_entity(user_id),
                max_id=0,
                limit=100
            ))
            return len(common_chats.chats)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–∏—Ö —á–∞—Ç–æ–≤: {str(e)}")
            return 0

    def format_last_seen(self, status):
        """Format last seen status"""
        if isinstance(status, types.UserStatusOnline):
            return "–í —Å–µ—Ç–∏"
        elif isinstance(status, types.UserStatusOffline):
            return datetime.fromtimestamp(status.was_online).strftime('%Y-%m-%d %H:%M:%S')
        elif isinstance(status, types.UserStatusRecently):
            return "–ù–µ–¥–∞–≤–Ω–æ"
        elif isinstance(status, types.UserStatusLastWeek):
            return "–ù–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ"
        elif isinstance(status, types.UserStatusLastMonth):
            return "–í –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ"
        elif isinstance(status, types.UserStatusEmpty):
            return "–°–∫—Ä—ã—Ç"
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def format_date(self, date_obj):
        """Format date object safely"""
        try:
            if isinstance(date_obj, int):
                # –ï—Å–ª–∏ —ç—Ç–æ timestamp
                return datetime.fromtimestamp(date_obj).strftime('%Y-%m-%d %H:%M:%S')
            elif hasattr(date_obj, 'strftime'):
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç datetime
                return date_obj.strftime('%Y-%m-%d %H:%M:%S')
            else:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        except (ValueError, TypeError, OSError):
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    async def cmd_userinfo(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .userinfo"""
        try:
            await event.edit("‚è≥ **–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...**")
            
            args = event.text.split()
            entity_ref = args[1] if len(args) > 1 else None
            
            entity = await self.resolve_entity(event, entity_ref)
            if not entity:
                await event.edit("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—É—â–Ω–æ—Å—Ç—å")
                return

            # For users
            if isinstance(entity, (types.InputPeerUser, types.InputPeerSelf)):
                try:
                    user = await self.bot.client.get_entity(entity)
                    full_user = await self.bot.client(functions.users.GetFullUserRequest(id=entity))
                    
                    # Check if it's a bot
                    if hasattr(user, 'bot') and user.bot:
                        # Bot info
                        common_chats = await self.get_common_chats_count(user.id)
                        about = getattr(full_user.full_user, 'about', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç') if hasattr(full_user, 'full_user') else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                        
                        bot_info = (
                            f"ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ**\n\n"
                            f"**üÜî ID:** `{user.id}`\n"
                            f"**üë§ –ò–º—è:** `{user.first_name or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`\n"
                            f"**üîπ Username:** @{user.username if hasattr(user, 'username') and user.username else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                            f"**üë• –û–±—â–∏–µ —á–∞—Ç—ã:** `{common_chats}`\n"
                            f"**üìù –û–ø–∏—Å–∞–Ω–∏–µ:** {about}"
                        )
                        
                        msg_obj = await event.edit(bot_info)
                        await self.add_to_autoclean(msg_obj)
                        return
                    
                    # Regular user info
                    common_chats = await self.get_common_chats_count(user.id)
                    last_seen = self.format_last_seen(user.status) if hasattr(user, 'status') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    # Get attached channel if exists
                    personal_channel = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    if hasattr(full_user, 'full_user') and hasattr(full_user.full_user, 'personal_channel_id') and full_user.full_user.personal_channel_id:
                        try:
                            channel = await self.bot.client.get_entity(full_user.full_user.personal_channel_id)
                            personal_channel = f"üì¢ @{channel.username}" if hasattr(channel, 'username') and channel.username else f"üì¢ ID: {channel.id}"
                        except:
                            personal_channel = f"üì¢ ID: {full_user.full_user.personal_channel_id}"

                    about = getattr(full_user.full_user, 'about', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç') if hasattr(full_user, 'full_user') else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    
                    user_info = (
                        f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n\n"
                        f"**üÜî ID:** `{user.id}`\n"
                        f"**üë§ –ò–º—è:** `{user.first_name or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`\n"
                        f"**üë§ –§–∞–º–∏–ª–∏—è:** `{user.last_name or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`\n"
                        f"**üîπ Username:** @{user.username if hasattr(user, 'username') and user.username else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                        f"**üìù –ë–∏–æ:** {about}\n"
                        f"**üì¢ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª:** {personal_channel}\n"
                        f"**üë• –û–±—â–∏–µ —á–∞—Ç—ã:** `{common_chats}`\n"
                        f"**üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç:** `{last_seen}`\n"
                        f"**‚≠ê –ü—Ä–µ–º–∏—É–º:** `{'–î–∞' if hasattr(user, 'premium') and user.premium else '–ù–µ—Ç'}`\n"
                        f"**‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:** `{'–î–∞' if hasattr(user, 'verified') and user.verified else '–ù–µ—Ç'}`"
                    )
                    
                    msg_obj = await event.edit(user_info)
                    await self.add_to_autoclean(msg_obj)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {str(e)}")
                    await event.edit("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")

            # For chats
            elif isinstance(entity, types.InputPeerChat):
                try:
                    chat = await self.bot.client.get_entity(entity)
                    full_chat = await self.bot.client(functions.messages.GetFullChatRequest(chat.id))
                    about = getattr(full_chat.full_chat, 'about', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                    participants_count = getattr(full_chat.full_chat, 'participants_count', 'N/A')
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                    creation_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    if hasattr(chat, 'date'):
                        creation_date = self.format_date(chat.date)
                    
                    chat_info = (
                        f"üë• **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ**\n\n"
                        f"**üÜî ID:** `{chat.id}`\n"
                        f"**üìõ –ù–∞–∑–≤–∞–Ω–∏–µ:** `{chat.title}`\n"
                        f"**üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** `{participants_count}`\n"
                        f"**üìù –û–ø–∏—Å–∞–Ω–∏–µ:** {about}\n"
                        f"**üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** `{creation_date}`"
                    )
                    
                    msg_obj = await event.edit(chat_info)
                    await self.add_to_autoclean(msg_obj)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {str(e)}")
                    await event.edit("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ")

            # For channels
            elif isinstance(entity, types.InputPeerChannel):
                try:
                    channel = await self.bot.client.get_entity(entity)
                    full_channel = await self.bot.client(functions.channels.GetFullChannelRequest(entity))
                    
                    about = getattr(full_channel.full_chat, 'about', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                    participants_count = getattr(full_channel.full_chat, 'participants_count', 'N/A')
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                    creation_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    if hasattr(channel, 'date'):
                        creation_date = self.format_date(channel.date)
                    
                    channel_info = (
                        f"üì¢ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ**\n\n"
                        f"**üÜî ID:** `{channel.id}`\n"
                        f"**üìõ –ù–∞–∑–≤–∞–Ω–∏–µ:** `{channel.title}`\n"
                        f"**üîπ Username:** @{channel.username if hasattr(channel, 'username') and channel.username else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                        f"**üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:** `{participants_count}`\n"
                        f"**üìù –û–ø–∏—Å–∞–Ω–∏–µ:** {about}\n"
                        f"**üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** `{creation_date}`"
                    )
                    
                    msg_obj = await event.edit(channel_info)
                    await self.add_to_autoclean(msg_obj)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {str(e)}")
                    await event.edit("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ")
            
            else:
                await event.edit("–î–∞–Ω–Ω—ã–π —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ .userinfo: {str(e)}")
            await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")

def setup(bot):
    UserInfoModule(bot)
